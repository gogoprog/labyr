// Generated by Haxe 3.4.2
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Application = function() { };
Application.__name__ = ["Application"];
Application.init = function() {
	console.log("Labyr init");
	gengine.setWindowSize(Module.IntVector2(1024,768));
	gengine.setWindowTitle("Labyr");
	gengine.setGuiFilename("gui/gui.html");
};
Application.start = function(_engine) {
	var state;
	Application.engine = _engine;
	var tmp = gengine.getRenderer().getDefaultZone();
	var this1 = Module.Color(0.8,0.9,0.8,1);
	tmp.setFogColor(this1);
	var cameraEntity = new gengine_Entity();
	cameraEntity.add(new gengine_components_Camera());
	var tmp1 = cameraEntity.get(gengine_components_Camera);
	var this2 = Module.Vector2(1024,768);
	tmp1.setOrthoSize(this2);
	cameraEntity.get(gengine_components_Camera).setOrthographic(true);
	Application.engine.addEntity(cameraEntity);
	Application.esm = new ash_fsm_EngineStateMachine(Application.engine);
	state = new ash_fsm_EngineState();
	state.addProvider(new ash_fsm_SystemInstanceProvider(new systems_MenuSystem()));
	Application.esm.addState("menu",state);
	var gameSystem = new systems_GameSystem();
	var tileMovementSystem = new systems_TileMovementSystem();
	state = new ash_fsm_EngineState();
	state.addProvider(new ash_fsm_SystemInstanceProvider(gameSystem));
	state.addProvider(new ash_fsm_SystemInstanceProvider(tileMovementSystem));
	Application.esm.addState("gameFalling",state);
	state = new ash_fsm_EngineState();
	state.addProvider(new ash_fsm_SystemInstanceProvider(gameSystem));
	state.addProvider(new ash_fsm_SystemInstanceProvider(new systems_MatchSystem()));
	Application.esm.addState("gameMatching",state);
	state = new ash_fsm_EngineState();
	state.addProvider(new ash_fsm_SystemInstanceProvider(gameSystem));
	state.addProvider(new ash_fsm_SystemInstanceProvider(new systems_InputSystem(cameraEntity)));
	Application.esm.addState("gameIdling",state);
	state = new ash_fsm_EngineState();
	state.addProvider(new ash_fsm_SystemInstanceProvider(gameSystem));
	state.addProvider(new ash_fsm_SystemInstanceProvider(tileMovementSystem));
	Application.esm.addState("gameRotating",state);
	Application.esm.changeState("menu");
	Factory.init();
	var border = Factory.createBorder(Module.IntVector2(200,800));
	var this3 = Module.Vector3(-420,0,0);
	border.set_position(this3);
	Application.engine.addEntity(border);
	border = Factory.createBorder(Module.IntVector2(200,800));
	var this4 = Module.Vector3(420,0,0);
	border.set_position(this4);
	Application.engine.addEntity(border);
	border = Factory.createBorder(Module.IntVector2(640,160));
	var this5 = Module.Vector3(0,400,0);
	border.set_position(this5);
	Application.engine.addEntity(border);
	border = Factory.createBorder(Module.IntVector2(640,160));
	var this6 = Module.Vector3(0,-400,0);
	border.set_position(this6);
	Application.engine.addEntity(border);
	Application.engine.addSystem(new systems_AudioSystem(),10);
	Application.changeState("menu");
};
Application.onGuiLoaded = function() {
	Application.pages = js_UIPages.createSet($("#body"));
	Application.pages.showPage(".menu");
	Application.engine.getSystem(systems_MenuSystem).init();
};
Application.changeState = function(stateName) {
	Application.engine.updateComplete.addOnce(function() {
		Application.esm.changeState(stateName);
	});
};
var Factory = function() { };
Factory.__name__ = ["Factory"];
Factory.init = function() {
	var _g1 = 0;
	var _g = GridConfig.width * GridConfig.height * 2;
	while(_g1 < _g) {
		var i = _g1++;
		Factory.pool.push(Factory.createItem());
	}
};
Factory.onItemRemoved = function(e) {
	Factory.pool.push(e);
};
Factory.createItem = function() {
	var e = new gengine_Entity();
	var sm = new ash_fsm_EntityStateMachine(e);
	e.add(new components_Tile());
	e.add(new gengine_components_StaticSprite2D());
	var hs = GridConfig.tileSize / 2;
	e.get(gengine_components_StaticSprite2D).setLayer(0);
	e.get(gengine_components_StaticSprite2D).setUseDrawRect(true);
	var tmp = e.get(gengine_components_StaticSprite2D);
	var this1 = Module.Vector2(-hs,-hs);
	var this2 = Module.Vector2(hs,hs);
	tmp.setDrawRect(Module.Rect(this1,this2));
	e.get(components_Tile).sm = sm;
	sm.createState("idle");
	sm.changeState("idle");
	sm.createState("moving").add(components_TileMovement).withInstance(new components_TileMovement());
	sm.createState("disappearing").add(components_TileDisappearing).withInstance(new components_TileDisappearing());
	return e;
};
Factory.getItem = function(type,angle) {
	var e;
	if(Factory.pool.length > 0) {
		e = Factory.pool.shift();
	} else {
		e = Factory.createItem();
	}
	var ttype = Type.createEnumIndex(components_TileType,type,null);
	var textureName;
	switch(ttype[1]) {
	case 0:
		textureName = "tile0.png";
		break;
	case 1:
		textureName = "tile2.png";
		break;
	case 2:
		textureName = "tile1.png";
		break;
	case 3:
		textureName = "tilet.png";
		break;
	}
	var tmp = e.get(gengine_components_StaticSprite2D);
	var this1 = Module.Color(1,1,1,1);
	tmp.setColor(this1);
	var tmp1 = e.get(gengine_components_StaticSprite2D);
	var tmp2 = gengine.getResourceCache().getSprite2D(textureName,true);
	tmp1.setSprite(tmp2);
	e.get(components_Tile).type = ttype;
	e.get(components_Tile).angle = angle;
	e.get(components_Tile).matching = false;
	e.node.setRotation2D(angle);
	return e;
};
Factory.createBorder = function(size) {
	var e = new gengine_Entity();
	e.add(new gengine_components_StaticSprite2D());
	e.get(gengine_components_StaticSprite2D).setUseDrawRect(true);
	e.get(gengine_components_StaticSprite2D).setUseTextureRect(true);
	var tmp = e.get(gengine_components_StaticSprite2D);
	var this1 = Module.Vector2(-size.x / 2,-size.y / 2);
	var this2 = Module.Vector2(size.x / 2,size.y / 2);
	tmp.setDrawRect(Module.Rect(this1,this2));
	var tmp1 = e.get(gengine_components_StaticSprite2D);
	var this3 = Module.Vector2(0,0);
	var this4 = Module.Vector2(size.x / 256,size.y / 256);
	tmp1.setTextureRect(Module.Rect(this3,this4));
	var sprite = gengine.getResourceCache().getSprite2D("ground.png",true);
	sprite.getTexture().setAddressMode(0,1);
	sprite.getTexture().setAddressMode(1,1);
	e.get(gengine_components_StaticSprite2D).setSprite(sprite);
	e.get(gengine_components_StaticSprite2D).setLayer(10);
	return e;
};
var GridConfig = function() { };
GridConfig.__name__ = ["GridConfig"];
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var ash_ClassMap = function() {
	this.keyMap = new haxe_ds_StringMap();
	this.valueMap = new haxe_ds_StringMap();
};
ash_ClassMap.__name__ = ["ash","ClassMap"];
ash_ClassMap.__interfaces__ = [haxe_IMap];
ash_ClassMap.prototype = {
	get: function(k) {
		var _this = this.valueMap;
		var key = Type.getClassName(k);
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,set: function(k,v) {
		var name = Type.getClassName(k);
		var _this = this.keyMap;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,k);
		} else {
			_this.h[name] = k;
		}
		var _this1 = this.valueMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,v);
		} else {
			_this1.h[name] = v;
		}
	}
	,exists: function(k) {
		var _this = this.valueMap;
		var key = Type.getClassName(k);
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,remove: function(k) {
		var name = Type.getClassName(k);
		this.keyMap.remove(name);
		return this.valueMap.remove(name);
	}
	,keys: function() {
		var _this = this.keyMap;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,iterator: function() {
		var _this = this.valueMap;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,toString: function() {
		return this.valueMap.toString();
	}
	,__class__: ash_ClassMap
};
var ash_GenericListIterator = function(head) {
	this.previous = { next : head};
};
ash_GenericListIterator.__name__ = ["ash","GenericListIterator"];
ash_GenericListIterator.prototype = {
	hasNext: function() {
		return this.previous.next != null;
	}
	,next: function() {
		var node = this.previous.next;
		this.previous = node;
		return node;
	}
	,__class__: ash_GenericListIterator
};
var ash_core_IFamily = function() { };
ash_core_IFamily.__name__ = ["ash","core","IFamily"];
ash_core_IFamily.prototype = {
	__class__: ash_core_IFamily
};
var ash_core_ComponentMatchingFamily = function(nodeClass,engine) {
	this.nodeClass = nodeClass;
	this.engine = engine;
	this.init();
};
ash_core_ComponentMatchingFamily.__name__ = ["ash","core","ComponentMatchingFamily"];
ash_core_ComponentMatchingFamily.__interfaces__ = [ash_core_IFamily];
ash_core_ComponentMatchingFamily.prototype = {
	init: function() {
		this.nodeList = new ash_core_NodeList();
		this.entities = new haxe_ds_ObjectMap();
		this.components = this.nodeClass._getComponents();
		this.nodePool = new ash_core_NodePool(this.nodeClass,this.components);
	}
	,newEntity: function(entity) {
		this.addIfMatch(entity);
	}
	,componentAddedToEntity: function(entity,componentClass) {
		this.addIfMatch(entity);
	}
	,componentRemovedFromEntity: function(entity,componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			this.removeIfMatch(entity);
		}
	}
	,removeEntity: function(entity) {
		this.removeIfMatch(entity);
	}
	,addIfMatch: function(entity) {
		if(this.entities.h.__keys__[entity.__id__] == null) {
			var _this = this.components.keyMap;
			var componentClass = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(componentClass.hasNext()) {
				var componentClass1 = componentClass.next();
				if(!entity.has(componentClass1)) {
					return;
				}
			}
			var node = this.nodePool.get();
			node.entity = entity;
			var _this1 = this.components.keyMap;
			var componentClass2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(componentClass2.hasNext()) {
				var componentClass3 = componentClass2.next();
				var _this2 = this.components.valueMap;
				var key = Type.getClassName(componentClass3);
				node[__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]] = entity.get(componentClass3);
			}
			this.entities.set(entity,node);
			this.nodeList.add(node);
		}
	}
	,removeIfMatch: function(entity) {
		if(this.entities.h.__keys__[entity.__id__] != null) {
			var node = this.entities.h[entity.__id__];
			this.entities.remove(entity);
			this.nodeList.remove(node);
			if(this.engine.updating) {
				this.nodePool.cache(node);
				this.engine.updateComplete.add($bind(this,this.releaseNodePoolCache));
			} else {
				this.nodePool.dispose(node);
			}
		}
	}
	,releaseNodePoolCache: function() {
		this.engine.updateComplete.remove($bind(this,this.releaseNodePoolCache));
		this.nodePool.releaseCache();
	}
	,cleanUp: function() {
		var _g_previous = { next : this.nodeList.head};
		while(_g_previous.next != null) {
			var node = _g_previous.next;
			_g_previous = node;
			var node1 = node;
			this.entities.remove(node1.entity);
		}
		this.nodeList.removeAll();
	}
	,__class__: ash_core_ComponentMatchingFamily
};
var ash_core_Engine = function() {
	this.familyClass = ash_core_ComponentMatchingFamily;
	this.entityList = new ash_core_EntityList();
	this.entityNames = new haxe_ds_StringMap();
	this.systemList = new ash_core_SystemList();
	this.families = new ash_ClassMap();
	this.entityAdded = new ash_signals_Signal1();
	this.entityRemoved = new ash_signals_Signal1();
	this.updateComplete = new ash_signals_Signal0();
	this.updating = false;
};
ash_core_Engine.__name__ = ["ash","core","Engine"];
ash_core_Engine.prototype = {
	addEntity: function(entity) {
		var key = entity.name;
		var _this = this.entityNames;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("The entity name " + entity.name + " is already in use by another entity.");
		}
		this.entityList.add(entity);
		var key1 = entity.name;
		var _this1 = this.entityNames;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,entity);
		} else {
			_this1.h[key1] = entity;
		}
		entity.componentAdded.add($bind(this,this.componentAdded));
		entity.componentRemoved.add($bind(this,this.componentRemoved));
		entity.nameChanged.add($bind(this,this.entityNameChanged));
		var _this2 = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.newEntity(entity);
		}
		this.entityAdded.dispatch(entity);
	}
	,removeEntity: function(entity) {
		entity.componentAdded.remove($bind(this,this.componentAdded));
		entity.componentRemoved.remove($bind(this,this.componentRemoved));
		entity.nameChanged.remove($bind(this,this.entityNameChanged));
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.removeEntity(entity);
		}
		this.entityNames.remove(entity.name);
		this.entityList.remove(entity);
		this.entityRemoved.dispatch(entity);
	}
	,entityNameChanged: function(entity,oldName) {
		var _this = this.entityNames;
		if((__map_reserved[oldName] != null ? _this.getReserved(oldName) : _this.h[oldName]) == entity) {
			this.entityNames.remove(oldName);
			var key = entity.name;
			var _this1 = this.entityNames;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,entity);
			} else {
				_this1.h[key] = entity;
			}
		}
	}
	,getEntityByName: function(name) {
		var _this = this.entityNames;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,removeAllEntities: function() {
		while(this.entityList.head != null) this.removeEntity(this.entityList.head);
	}
	,get_entities: function() {
		return this.entityList;
	}
	,componentAdded: function(entity,componentClass) {
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.componentAddedToEntity(entity,componentClass);
		}
	}
	,componentRemoved: function(entity,componentClass) {
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.componentRemovedFromEntity(entity,componentClass);
		}
	}
	,getNodeList: function(nodeClass) {
		var _this = this.families.valueMap;
		var key = Type.getClassName(nodeClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.families.valueMap;
			var key1 = Type.getClassName(nodeClass);
			return (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).nodeList;
		}
		var family = Type.createInstance(this.familyClass,[nodeClass,this]);
		var _this2 = this.families;
		var name = Type.getClassName(nodeClass);
		var _this3 = _this2.keyMap;
		if(__map_reserved[name] != null) {
			_this3.setReserved(name,nodeClass);
		} else {
			_this3.h[name] = nodeClass;
		}
		var _this4 = _this2.valueMap;
		if(__map_reserved[name] != null) {
			_this4.setReserved(name,family);
		} else {
			_this4.h[name] = family;
		}
		var _g_previous = { next : this.entityList.head};
		while(_g_previous.next != null) {
			var node = _g_previous.next;
			_g_previous = node;
			var entity = node;
			family.newEntity(entity);
		}
		return family.nodeList;
	}
	,releaseNodeList: function(nodeClass) {
		var _this = this.families.valueMap;
		var key = Type.getClassName(nodeClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.families.valueMap;
			var key1 = Type.getClassName(nodeClass);
			(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).cleanUp();
			var _this2 = this.families;
			var name = Type.getClassName(nodeClass);
			_this2.keyMap.remove(name);
			_this2.valueMap.remove(name);
		}
	}
	,addSystem: function(system,priority) {
		if(this.updating) {
			throw new js__$Boot_HaxeError("Systems cannot be added during engine update. The updateComplete signal should be used.");
		}
		system.priority = priority;
		system.addToEngine(this);
		this.systemList.add(system);
	}
	,getSystem: function(type) {
		return this.systemList.get(type);
	}
	,get_systems: function() {
		return this.systemList;
	}
	,removeSystem: function(system) {
		if(this.updating) {
			throw new js__$Boot_HaxeError("Systems cannot be removed during engine update. The updateComplete signal should be used.");
		}
		this.systemList.remove(system);
		system.removeFromEngine(this);
	}
	,removeAllSystems: function() {
		while(this.systemList.head != null) {
			var system = this.systemList.head;
			this.systemList.head = this.systemList.head.next;
			system.previous = null;
			system.next = null;
			system.removeFromEngine(this);
			this.removeSystem(this.systemList.head);
		}
		this.systemList.tail = null;
	}
	,update: function(time) {
		this.updating = true;
		var _g_previous = { next : this.systemList.head};
		while(_g_previous.next != null) {
			var node = _g_previous.next;
			_g_previous = node;
			var system = node;
			system.update(time);
		}
		this.updating = false;
		this.updateComplete.dispatch();
	}
	,__class__: ash_core_Engine
};
var ash_core_Entity = function(name) {
	if(name == null) {
		name = "";
	}
	this.componentAdded = new ash_signals_Signal2();
	this.componentRemoved = new ash_signals_Signal2();
	this.nameChanged = new ash_signals_Signal2();
	this.components = new ash_ClassMap();
	if(name != "") {
		if(this.name != name) {
			var previous = this.name;
			this.name = name;
			this.nameChanged.dispatch(this,previous);
		}
	} else {
		var value = "_entity" + ++ash_core_Entity.nameCount;
		if(this.name != value) {
			var previous1 = this.name;
			this.name = value;
			this.nameChanged.dispatch(this,previous1);
		}
	}
};
ash_core_Entity.__name__ = ["ash","core","Entity"];
ash_core_Entity.prototype = {
	set_name: function(value) {
		if(this.name != value) {
			var previous = this.name;
			this.name = value;
			this.nameChanged.dispatch(this,previous);
		}
		return value;
	}
	,add: function(component,componentClass) {
		if(componentClass == null) {
			if(component == null) {
				componentClass = null;
			} else {
				componentClass = js_Boot.getClass(component);
			}
		}
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			this.remove(componentClass);
		}
		var _this1 = this.components;
		var name = Type.getClassName(componentClass);
		var _this2 = _this1.keyMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,componentClass);
		} else {
			_this2.h[name] = componentClass;
		}
		var _this3 = _this1.valueMap;
		if(__map_reserved[name] != null) {
			_this3.setReserved(name,component);
		} else {
			_this3.h[name] = component;
		}
		this.componentAdded.dispatch(this,componentClass);
		return this;
	}
	,remove: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		var component = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(component != null) {
			var _this1 = this.components;
			var name = Type.getClassName(componentClass);
			_this1.keyMap.remove(name);
			_this1.valueMap.remove(name);
			this.componentRemoved.dispatch(this,componentClass);
			return component;
		}
		return null;
	}
	,get: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,getAll: function() {
		var componentArray = [];
		var _this = this.components.valueMap;
		var component = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(component.hasNext()) {
			var component1 = component.next();
			componentArray.push(component1);
		}
		return componentArray;
	}
	,has: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,__class__: ash_core_Entity
};
var ash_core_EntityList = function() {
};
ash_core_EntityList.__name__ = ["ash","core","EntityList"];
ash_core_EntityList.prototype = {
	add: function(entity) {
		if(this.head == null) {
			this.head = this.tail = entity;
			entity.next = entity.previous = null;
		} else {
			this.tail.next = entity;
			entity.previous = this.tail;
			entity.next = null;
			this.tail = entity;
		}
	}
	,remove: function(entity) {
		if(this.head == entity) {
			this.head = this.head.next;
		}
		if(this.tail == entity) {
			this.tail = this.tail.previous;
		}
		if(entity.previous != null) {
			entity.previous.next = entity.next;
		}
		if(entity.next != null) {
			entity.next.previous = entity.previous;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var entity = this.head;
			this.head = this.head.next;
			entity.previous = null;
			entity.next = null;
		}
		this.tail = null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,__class__: ash_core_EntityList
};
var ash_core_Node = function() { };
ash_core_Node.__name__ = ["ash","core","Node"];
ash_core_Node.prototype = {
	__class__: ash_core_Node
};
var ash_core_NodeList = function() {
	this.nodeAdded = new ash_signals_Signal1();
	this.nodeRemoved = new ash_signals_Signal1();
};
ash_core_NodeList.__name__ = ["ash","core","NodeList"];
ash_core_NodeList.prototype = {
	add: function(node) {
		if(this.head == null) {
			this.head = this.tail = node;
			node.next = node.previous = null;
		} else {
			this.tail.next = node;
			node.previous = this.tail;
			node.next = null;
			this.tail = node;
		}
		this.nodeAdded.dispatch(node);
	}
	,remove: function(node) {
		if(this.head == node) {
			this.head = this.head.next;
		}
		if(this.tail == node) {
			this.tail = this.tail.previous;
		}
		if(node.previous != null) {
			node.previous.next = node.next;
		}
		if(node.next != null) {
			node.next.previous = node.previous;
		}
		this.nodeRemoved.dispatch(node);
	}
	,removeAll: function() {
		while(this.head != null) {
			var node = this.head;
			this.head = this.head.next;
			node.previous = null;
			node.next = null;
			this.nodeRemoved.dispatch(node);
		}
		this.tail = null;
	}
	,get_empty: function() {
		return this.head == null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,swap: function(node1,node2) {
		if(node1.previous == node2) {
			node1.previous = node2.previous;
			node2.previous = node1;
			node2.next = node1.next;
			node1.next = node2;
		} else if(node2.previous == node1) {
			node2.previous = node1.previous;
			node1.previous = node2;
			node1.next = node2.next;
			node2.next = node1;
		} else {
			var temp = node1.previous;
			node1.previous = node2.previous;
			node2.previous = temp;
			temp = node1.next;
			node1.next = node2.next;
			node2.next = temp;
		}
		if(this.head == node1) {
			this.head = node2;
		} else if(this.head == node2) {
			this.head = node1;
		}
		if(this.tail == node1) {
			this.tail = node2;
		} else if(this.tail == node2) {
			this.tail = node1;
		}
		if(node1.previous != null) {
			node1.previous.next = node1;
		}
		if(node2.previous != null) {
			node2.previous.next = node2;
		}
		if(node1.next != null) {
			node1.next.previous = node1;
		}
		if(node2.next != null) {
			node2.next.previous = node2;
		}
	}
	,insertionSort: function(sortFunction) {
		if(this.head == this.tail) {
			return;
		}
		var remains = this.head.next;
		var node = remains;
		while(node != null) {
			remains = node.next;
			var other = node.previous;
			while(other != null) {
				if(sortFunction(node,other) >= 0) {
					if(node != other.next) {
						if(this.tail == node) {
							this.tail = node.previous;
						}
						node.previous.next = node.next;
						if(node.next != null) {
							node.next.previous = node.previous;
						}
						node.next = other.next;
						node.previous = other;
						node.next.previous = node;
						other.next = node;
					}
					break;
				}
				other = other.previous;
			}
			if(other == null) {
				if(this.tail == node) {
					this.tail = node.previous;
				}
				node.previous.next = node.next;
				if(node.next != null) {
					node.next.previous = node.previous;
				}
				node.next = this.head;
				this.head.previous = node;
				node.previous = null;
				this.head = node;
			}
			node = remains;
		}
	}
	,mergeSort: function(sortFunction) {
		if(this.head == this.tail) {
			return;
		}
		var lists = [];
		var start = this.head;
		var end;
		while(start != null) {
			end = start;
			while(end.next != null && sortFunction(end,end.next) <= 0) end = end.next;
			var next = end.next;
			start.previous = end.next = null;
			lists.push(start);
			start = next;
		}
		while(lists.length > 1) lists.push(this.merge(lists.shift(),lists.shift(),sortFunction));
		this.tail = this.head = lists[0];
		while(this.tail.next != null) this.tail = this.tail.next;
	}
	,merge: function(head1,head2,sortFunction) {
		var node;
		var head;
		if(sortFunction(head1,head2) <= 0) {
			node = head1;
			head = node;
			head1 = head1.next;
		} else {
			node = head2;
			head = node;
			head2 = head2.next;
		}
		while(head1 != null && head2 != null) if(sortFunction(head1,head2) <= 0) {
			node.next = head1;
			head1.previous = node;
			node = head1;
			head1 = head1.next;
		} else {
			node.next = head2;
			head2.previous = node;
			node = head2;
			head2 = head2.next;
		}
		if(head1 != null) {
			node.next = head1;
			head1.previous = node;
		} else {
			node.next = head2;
			head2.previous = node;
		}
		return head;
	}
	,__class__: ash_core_NodeList
};
var ash_core_NodePool = function(nodeClass,components) {
	this.nodeClass = nodeClass;
	this.components = components;
};
ash_core_NodePool.__name__ = ["ash","core","NodePool"];
ash_core_NodePool.prototype = {
	get: function() {
		if(this.tail != null) {
			var node = this.tail;
			this.tail = this.tail.previous;
			node.previous = null;
			return node;
		} else {
			return Type.createEmptyInstance(this.nodeClass);
		}
	}
	,dispose: function(node) {
		var _this = this.components.valueMap;
		var componentName = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(componentName.hasNext()) {
			var componentName1 = componentName.next();
			node[componentName1] = null;
		}
		node.entity = null;
		node.next = null;
		node.previous = this.tail;
		this.tail = node;
	}
	,cache: function(node) {
		node.previous = this.cacheTail;
		this.cacheTail = node;
	}
	,releaseCache: function() {
		while(this.cacheTail != null) {
			var node = this.cacheTail;
			this.cacheTail = node.previous;
			node.next = null;
			node.previous = this.tail;
			this.tail = node;
		}
	}
	,__class__: ash_core_NodePool
};
var ash_core_System = function() {
	this.priority = 0;
};
ash_core_System.__name__ = ["ash","core","System"];
ash_core_System.prototype = {
	addToEngine: function(engine) {
	}
	,removeFromEngine: function(engine) {
	}
	,update: function(time) {
	}
	,__class__: ash_core_System
};
var ash_core_SystemList = function() {
};
ash_core_SystemList.__name__ = ["ash","core","SystemList"];
ash_core_SystemList.prototype = {
	add: function(system) {
		if(this.head == null) {
			this.head = this.tail = system;
			system.next = system.previous = null;
		} else {
			var node = this.tail;
			while(node != null) {
				if(node.priority <= system.priority) {
					break;
				}
				node = node.previous;
			}
			if(node == this.tail) {
				this.tail.next = system;
				system.previous = this.tail;
				system.next = null;
				this.tail = system;
			} else if(node == null) {
				system.next = this.head;
				system.previous = null;
				this.head.previous = system;
				this.head = system;
			} else {
				system.next = node.next;
				system.previous = node;
				node.next.previous = system;
				node.next = system;
			}
		}
	}
	,remove: function(system) {
		if(this.head == system) {
			this.head = this.head.next;
		}
		if(this.tail == system) {
			this.tail = this.tail.previous;
		}
		if(system.previous != null) {
			system.previous.next = system.next;
		}
		if(system.next != null) {
			system.next.previous = system.previous;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var system = this.head;
			this.head = this.head.next;
			system.previous = null;
			system.next = null;
		}
		this.tail = null;
	}
	,get: function(type) {
		var system = this.head;
		while(system != null) {
			if(js_Boot.__instanceof(system,type)) {
				return system;
			}
			system = system.next;
		}
		return null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,__class__: ash_core_SystemList
};
var ash_fsm_IComponentProvider = function() { };
ash_fsm_IComponentProvider.__name__ = ["ash","fsm","IComponentProvider"];
ash_fsm_IComponentProvider.prototype = {
	__class__: ash_fsm_IComponentProvider
};
var ash_fsm_ComponentInstanceProvider = function(instance) {
	this.instance = instance;
};
ash_fsm_ComponentInstanceProvider.__name__ = ["ash","fsm","ComponentInstanceProvider"];
ash_fsm_ComponentInstanceProvider.__interfaces__ = [ash_fsm_IComponentProvider];
ash_fsm_ComponentInstanceProvider.prototype = {
	getComponent: function() {
		return this.instance;
	}
	,get_identifier: function() {
		return this.instance;
	}
	,__class__: ash_fsm_ComponentInstanceProvider
};
var ash_fsm_ComponentSingletonProvider = function(type) {
	this.componentType = type;
};
ash_fsm_ComponentSingletonProvider.__name__ = ["ash","fsm","ComponentSingletonProvider"];
ash_fsm_ComponentSingletonProvider.__interfaces__ = [ash_fsm_IComponentProvider];
ash_fsm_ComponentSingletonProvider.prototype = {
	getComponent: function() {
		if(this.instance == null) {
			this.instance = Type.createInstance(this.componentType,[]);
		}
		return this.instance;
	}
	,get_identifier: function() {
		return this.getComponent();
	}
	,__class__: ash_fsm_ComponentSingletonProvider
};
var ash_fsm_ComponentTypeProvider = function(type) {
	this.componentType = type;
};
ash_fsm_ComponentTypeProvider.__name__ = ["ash","fsm","ComponentTypeProvider"];
ash_fsm_ComponentTypeProvider.__interfaces__ = [ash_fsm_IComponentProvider];
ash_fsm_ComponentTypeProvider.prototype = {
	getComponent: function() {
		return Type.createInstance(this.componentType,[]);
	}
	,get_identifier: function() {
		return this.componentType;
	}
	,__class__: ash_fsm_ComponentTypeProvider
};
var ash_fsm_DynamicComponentProvider = function(closure) {
	this._closure = closure;
};
ash_fsm_DynamicComponentProvider.__name__ = ["ash","fsm","DynamicComponentProvider"];
ash_fsm_DynamicComponentProvider.__interfaces__ = [ash_fsm_IComponentProvider];
ash_fsm_DynamicComponentProvider.prototype = {
	getComponent: function() {
		return this._closure();
	}
	,get_identifier: function() {
		return this._closure;
	}
	,__class__: ash_fsm_DynamicComponentProvider
};
var ash_fsm_ISystemProvider = function() { };
ash_fsm_ISystemProvider.__name__ = ["ash","fsm","ISystemProvider"];
ash_fsm_ISystemProvider.prototype = {
	__class__: ash_fsm_ISystemProvider
};
var ash_fsm_DynamicSystemProvider = function(method) {
	this.method = method;
};
ash_fsm_DynamicSystemProvider.__name__ = ["ash","fsm","DynamicSystemProvider"];
ash_fsm_DynamicSystemProvider.__interfaces__ = [ash_fsm_ISystemProvider];
ash_fsm_DynamicSystemProvider.prototype = {
	getSystem: function() {
		return this.method();
	}
	,get_identifier: function() {
		return this.method;
	}
	,get_priority: function() {
		return this.priority;
	}
	,set_priority: function(value) {
		return this.priority = value;
	}
	,__class__: ash_fsm_DynamicSystemProvider
};
var ash_fsm_EngineState = function() {
	this.providers = [];
};
ash_fsm_EngineState.__name__ = ["ash","fsm","EngineState"];
ash_fsm_EngineState.prototype = {
	addInstance: function(system) {
		return this.addProvider(new ash_fsm_SystemInstanceProvider(system));
	}
	,addSingleton: function(type) {
		return this.addProvider(new ash_fsm_SystemSingletonProvider(type));
	}
	,addMethod: function(method) {
		return this.addProvider(new ash_fsm_DynamicSystemProvider(method));
	}
	,addProvider: function(provider) {
		var mapping = new ash_fsm_StateSystemMapping(this,provider);
		this.providers.push(provider);
		return mapping;
	}
	,__class__: ash_fsm_EngineState
};
var ash_fsm_EngineStateMachine = function(engine) {
	this.engine = engine;
	this.states = new haxe_ds_StringMap();
};
ash_fsm_EngineStateMachine.__name__ = ["ash","fsm","EngineStateMachine"];
ash_fsm_EngineStateMachine.prototype = {
	hasState: function(name) {
		var _this = this.states;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,addState: function(name,state) {
		var _this = this.states;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,state);
		} else {
			_this.h[name] = state;
		}
		return this;
	}
	,createState: function(name) {
		var state = new ash_fsm_EngineState();
		var _this = this.states;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,state);
		} else {
			_this.h[name] = state;
		}
		return state;
	}
	,changeState: function(name) {
		var _this = this.states;
		var newState = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(newState == null) {
			throw new js__$Boot_HaxeError("Engine state " + name + " doesn't exist");
		}
		if(newState == this.currentState) {
			newState = null;
			return;
		}
		var toAdd = new haxe_ds_ObjectMap();
		var id;
		var _g = 0;
		var _g1 = newState.providers;
		while(_g < _g1.length) {
			var provider = _g1[_g];
			++_g;
			id = provider.get_identifier();
			toAdd.set(id,provider);
		}
		if(this.currentState != null) {
			var _g2 = 0;
			var _g11 = this.currentState.providers;
			while(_g2 < _g11.length) {
				var provider1 = _g11[_g2];
				++_g2;
				id = provider1.get_identifier();
				var other = toAdd.h[id.__id__];
				if(other != null) {
					toAdd.remove(id);
				} else {
					this.engine.removeSystem(provider1.getSystem());
				}
			}
		}
		var provider2 = toAdd.iterator();
		while(provider2.hasNext()) {
			var provider3 = provider2.next();
			this.engine.addSystem(provider3.getSystem(),provider3.priority);
		}
		this.currentState = newState;
	}
	,__class__: ash_fsm_EngineStateMachine
};
var ash_fsm_EntityState = function() {
	this.providers = new ash_ClassMap();
};
ash_fsm_EntityState.__name__ = ["ash","fsm","EntityState"];
ash_fsm_EntityState.prototype = {
	add: function(type) {
		return new ash_fsm_StateComponentMapping(this,type);
	}
	,get: function(type) {
		var _this = this.providers.valueMap;
		var key = Type.getClassName(type);
		return __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	}
	,has: function(type) {
		var _this = this.providers.valueMap;
		var key = Type.getClassName(type);
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,__class__: ash_fsm_EntityState
};
var ash_fsm_EntityStateMachine = function(entity) {
	this.entity = entity;
	this.states = new haxe_ds_StringMap();
};
ash_fsm_EntityStateMachine.__name__ = ["ash","fsm","EntityStateMachine"];
ash_fsm_EntityStateMachine.prototype = {
	hasState: function(name) {
		var _this = this.states;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,addState: function(name,state) {
		var _this = this.states;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,state);
		} else {
			_this.h[name] = state;
		}
		return this;
	}
	,createState: function(name) {
		var state = new ash_fsm_EntityState();
		var _this = this.states;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,state);
		} else {
			_this.h[name] = state;
		}
		return state;
	}
	,changeState: function(name) {
		var _this = this.states;
		var newState = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(newState == null) {
			throw new js__$Boot_HaxeError("Entity state " + name + " doesn't exist");
		}
		if(newState == this.currentState) {
			newState = null;
			return;
		}
		var toAdd;
		if(this.currentState != null) {
			toAdd = new ash_ClassMap();
			var _this1 = newState.providers.keyMap;
			var t = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(t.hasNext()) {
				var t1 = t.next();
				var _this2 = newState.providers.valueMap;
				var key = Type.getClassName(t1);
				var v = __map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key];
				var name1 = Type.getClassName(t1);
				var _this3 = toAdd.keyMap;
				if(__map_reserved[name1] != null) {
					_this3.setReserved(name1,t1);
				} else {
					_this3.h[name1] = t1;
				}
				var _this4 = toAdd.valueMap;
				if(__map_reserved[name1] != null) {
					_this4.setReserved(name1,v);
				} else {
					_this4.h[name1] = v;
				}
			}
			var _this5 = this.currentState.providers.keyMap;
			var t2 = new haxe_ds__$StringMap_StringMapIterator(_this5,_this5.arrayKeys());
			while(t2.hasNext()) {
				var t3 = t2.next();
				var _this6 = toAdd.valueMap;
				var key1 = Type.getClassName(t3);
				var other = __map_reserved[key1] != null ? _this6.getReserved(key1) : _this6.h[key1];
				var tmp;
				if(other != null) {
					var tmp1 = other.get_identifier();
					var _this7 = this.currentState.providers.valueMap;
					var key2 = Type.getClassName(t3);
					tmp = tmp1 == (__map_reserved[key2] != null ? _this7.getReserved(key2) : _this7.h[key2]).get_identifier();
				} else {
					tmp = false;
				}
				if(tmp) {
					var name2 = Type.getClassName(t3);
					toAdd.keyMap.remove(name2);
					toAdd.valueMap.remove(name2);
				} else {
					this.entity.remove(t3);
				}
			}
		} else {
			toAdd = newState.providers;
		}
		var _this8 = toAdd.keyMap;
		var t4 = new haxe_ds__$StringMap_StringMapIterator(_this8,_this8.arrayKeys());
		while(t4.hasNext()) {
			var t5 = t4.next();
			var tmp2 = this.entity;
			var _this9 = toAdd.valueMap;
			var key3 = Type.getClassName(t5);
			tmp2.add((__map_reserved[key3] != null ? _this9.getReserved(key3) : _this9.h[key3]).getComponent(),t5);
		}
		this.currentState = newState;
	}
	,__class__: ash_fsm_EntityStateMachine
};
var ash_fsm_StateComponentMapping = function(creatingState,type) {
	this.creatingState = creatingState;
	this.componentType = type;
	this.withType(type);
};
ash_fsm_StateComponentMapping.__name__ = ["ash","fsm","StateComponentMapping"];
ash_fsm_StateComponentMapping.prototype = {
	withInstance: function(component) {
		this.setProvider(new ash_fsm_ComponentInstanceProvider(component));
		return this;
	}
	,withType: function(type) {
		this.setProvider(new ash_fsm_ComponentTypeProvider(type));
		return this;
	}
	,withSingleton: function(type) {
		if(type == null) {
			type = this.componentType;
		}
		this.setProvider(new ash_fsm_ComponentSingletonProvider(type));
		return this;
	}
	,withMethod: function(method) {
		this.setProvider(new ash_fsm_DynamicComponentProvider(method));
		return this;
	}
	,withProvider: function(provider) {
		this.setProvider(provider);
		return this;
	}
	,add: function(type) {
		return this.creatingState.add(type);
	}
	,setProvider: function(provider) {
		this.provider = provider;
		var _this = this.creatingState.providers;
		var k = this.componentType;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,provider);
		} else {
			_this2.h[name] = provider;
		}
	}
	,__class__: ash_fsm_StateComponentMapping
};
var ash_fsm_StateSystemMapping = function(creatingState,provider) {
	this.creatingState = creatingState;
	this.provider = provider;
};
ash_fsm_StateSystemMapping.__name__ = ["ash","fsm","StateSystemMapping"];
ash_fsm_StateSystemMapping.prototype = {
	withPriority: function(priority) {
		this.provider.set_priority(priority);
		return this;
	}
	,addInstance: function(system) {
		return this.creatingState.addProvider(new ash_fsm_SystemInstanceProvider(system));
	}
	,addSingleton: function(type) {
		return this.creatingState.addSingleton(type);
	}
	,addMethod: function(method) {
		return this.creatingState.addMethod(method);
	}
	,addProvider: function(provider) {
		return this.creatingState.addProvider(provider);
	}
	,__class__: ash_fsm_StateSystemMapping
};
var ash_fsm_SystemInstanceProvider = function(instance) {
	this.instance = instance;
};
ash_fsm_SystemInstanceProvider.__name__ = ["ash","fsm","SystemInstanceProvider"];
ash_fsm_SystemInstanceProvider.__interfaces__ = [ash_fsm_ISystemProvider];
ash_fsm_SystemInstanceProvider.prototype = {
	getSystem: function() {
		return this.instance;
	}
	,get_identifier: function() {
		return this.instance;
	}
	,get_priority: function() {
		return this.priority;
	}
	,set_priority: function(value) {
		return this.priority = value;
	}
	,__class__: ash_fsm_SystemInstanceProvider
};
var ash_fsm_SystemSingletonProvider = function(type) {
	this.componentType = type;
};
ash_fsm_SystemSingletonProvider.__name__ = ["ash","fsm","SystemSingletonProvider"];
ash_fsm_SystemSingletonProvider.__interfaces__ = [ash_fsm_ISystemProvider];
ash_fsm_SystemSingletonProvider.prototype = {
	getSystem: function() {
		if(this.instance == null) {
			this.instance = Type.createInstance(this.componentType,[]);
		}
		return this.instance;
	}
	,get_identifier: function() {
		return this.getSystem();
	}
	,get_priority: function() {
		return this.priority;
	}
	,set_priority: function(value) {
		return this.priority = value;
	}
	,__class__: ash_fsm_SystemSingletonProvider
};
var ash_signals_ListenerNode = function() {
};
ash_signals_ListenerNode.__name__ = ["ash","signals","ListenerNode"];
ash_signals_ListenerNode.prototype = {
	__class__: ash_signals_ListenerNode
};
var ash_signals_ListenerNodePool = function() {
};
ash_signals_ListenerNodePool.__name__ = ["ash","signals","ListenerNodePool"];
ash_signals_ListenerNodePool.prototype = {
	get: function() {
		if(this.tail != null) {
			var node = this.tail;
			this.tail = this.tail.previous;
			node.previous = null;
			return node;
		} else {
			return new ash_signals_ListenerNode();
		}
	}
	,dispose: function(node) {
		node.listener = null;
		node.once = false;
		node.next = null;
		node.previous = this.tail;
		this.tail = node;
	}
	,cache: function(node) {
		node.listener = null;
		node.previous = this.cacheTail;
		this.cacheTail = node;
	}
	,releaseCache: function() {
		while(this.cacheTail != null) {
			var node = this.cacheTail;
			this.cacheTail = node.previous;
			node.next = null;
			node.previous = this.tail;
			this.tail = node;
		}
	}
	,__class__: ash_signals_ListenerNodePool
};
var ash_signals_SignalBase = function() {
	this.listenerNodePool = new ash_signals_ListenerNodePool();
	this.numListeners = 0;
};
ash_signals_SignalBase.__name__ = ["ash","signals","SignalBase"];
ash_signals_SignalBase.prototype = {
	startDispatch: function() {
		this.dispatching = true;
	}
	,endDispatch: function() {
		this.dispatching = false;
		if(this.toAddHead != null) {
			if(this.head == null) {
				this.head = this.toAddHead;
				this.tail = this.toAddTail;
			} else {
				this.tail.next = this.toAddHead;
				this.toAddHead.previous = this.tail;
				this.tail = this.toAddTail;
			}
			this.toAddHead = null;
			this.toAddTail = null;
		}
		this.listenerNodePool.releaseCache();
	}
	,getNode: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		return node;
	}
	,nodeExists: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		return node != null;
	}
	,add: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		if(node != null) {
			return;
		}
		var node1 = this.listenerNodePool.get();
		node1.listener = listener;
		this.addNode(node1);
	}
	,addOnce: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		if(node != null) {
			return;
		}
		var node1 = this.listenerNodePool.get();
		node1.listener = listener;
		node1.once = true;
		this.addNode(node1);
	}
	,addNode: function(node) {
		if(this.dispatching) {
			if(this.toAddHead == null) {
				this.toAddHead = this.toAddTail = node;
			} else {
				this.toAddTail.next = node;
				node.previous = this.toAddTail;
				this.toAddTail = node;
			}
		} else if(this.head == null) {
			this.head = this.tail = node;
		} else {
			this.tail.next = node;
			node.previous = this.tail;
			this.tail = node;
		}
		this.numListeners++;
	}
	,remove: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		var node1 = node;
		if(node1 != null) {
			if(this.head == node1) {
				this.head = this.head.next;
			}
			if(this.tail == node1) {
				this.tail = this.tail.previous;
			}
			if(this.toAddHead == node1) {
				this.toAddHead = this.toAddHead.next;
			}
			if(this.toAddTail == node1) {
				this.toAddTail = this.toAddTail.previous;
			}
			if(node1.previous != null) {
				node1.previous.next = node1.next;
			}
			if(node1.next != null) {
				node1.next.previous = node1.previous;
			}
			if(this.dispatching) {
				this.listenerNodePool.cache(node1);
			} else {
				this.listenerNodePool.dispose(node1);
			}
			this.numListeners--;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var node = this.head;
			this.head = this.head.next;
			this.listenerNodePool.dispose(node);
		}
		this.tail = null;
		this.toAddHead = null;
		this.toAddTail = null;
		this.numListeners = 0;
	}
	,__class__: ash_signals_SignalBase
};
var ash_signals_Signal0 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal0.__name__ = ["ash","signals","Signal0"];
ash_signals_Signal0.__super__ = ash_signals_SignalBase;
ash_signals_Signal0.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function() {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener();
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal0
});
var ash_signals_Signal1 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal1.__name__ = ["ash","signals","Signal1"];
ash_signals_Signal1.__super__ = ash_signals_SignalBase;
ash_signals_Signal1.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function(object1) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal1
});
var ash_signals_Signal2 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal2.__name__ = ["ash","signals","Signal2"];
ash_signals_Signal2.__super__ = ash_signals_SignalBase;
ash_signals_Signal2.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function(object1,object2) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1,object2);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal2
});
var ash_tools_ListIteratingSystem = function(nodeClass,nodeUpdateFunction,nodeAddedFunction,nodeRemovedFunction) {
	ash_core_System.call(this);
	this.nodeClass = nodeClass;
	this.nodeUpdateFunction = nodeUpdateFunction;
	this.nodeAddedFunction = nodeAddedFunction;
	this.nodeRemovedFunction = nodeRemovedFunction;
};
ash_tools_ListIteratingSystem.__name__ = ["ash","tools","ListIteratingSystem"];
ash_tools_ListIteratingSystem.__super__ = ash_core_System;
ash_tools_ListIteratingSystem.prototype = $extend(ash_core_System.prototype,{
	addToEngine: function(engine) {
		this.nodeList = engine.getNodeList(this.nodeClass);
		if(this.nodeAddedFunction != null) {
			var _g_previous = { next : this.nodeList.head};
			while(_g_previous.next != null) {
				var node = _g_previous.next;
				_g_previous = node;
				var node1 = node;
				this.nodeAddedFunction(node1);
			}
			this.nodeList.nodeAdded.add(this.nodeAddedFunction);
		}
		if(this.nodeRemovedFunction != null) {
			this.nodeList.nodeRemoved.add(this.nodeRemovedFunction);
		}
	}
	,removeFromEngine: function(engine) {
		if(this.nodeAddedFunction != null) {
			this.nodeList.nodeAdded.remove(this.nodeAddedFunction);
		}
		if(this.nodeRemovedFunction != null) {
			this.nodeList.nodeRemoved.remove(this.nodeRemovedFunction);
		}
		this.nodeList = null;
	}
	,update: function(time) {
		if(this.nodeUpdateFunction != null) {
			var _g_previous = { next : this.nodeList.head};
			while(_g_previous.next != null) {
				var node = _g_previous.next;
				_g_previous = node;
				var node1 = node;
				this.nodeUpdateFunction(node1,time);
			}
		}
	}
	,__class__: ash_tools_ListIteratingSystem
});
var components_TileType = { __ename__ : true, __constructs__ : ["EMPTY","L","I","T"] };
components_TileType.EMPTY = ["EMPTY",0];
components_TileType.EMPTY.__enum__ = components_TileType;
components_TileType.L = ["L",1];
components_TileType.L.__enum__ = components_TileType;
components_TileType.I = ["I",2];
components_TileType.I.__enum__ = components_TileType;
components_TileType.T = ["T",3];
components_TileType.T.__enum__ = components_TileType;
var components_Tile = function() {
	this.matching = false;
	this.angle = 0;
	this.position = Module.IntVector2(0,0);
};
components_Tile.__name__ = ["components","Tile"];
components_Tile.prototype = {
	__class__: components_Tile
};
var components_TileDisappearing = function() {
};
components_TileDisappearing.__name__ = ["components","TileDisappearing"];
components_TileDisappearing.prototype = {
	__class__: components_TileDisappearing
};
var components_TileMovement = function() {
	this.duration = 1.0;
	this.time = 0.0;
};
components_TileMovement.__name__ = ["components","TileMovement"];
components_TileMovement.prototype = {
	__class__: components_TileMovement
};
var gengine_Entity = function(node) {
	this._children = [];
	ash_core_Entity.call(this);
	if(node == null) {
		this.node = new Module.Node(gengine.getContext()); this.node.addRef();
	} else {
		this.node = node;
	}
};
gengine_Entity.__name__ = ["gengine","Entity"];
gengine_Entity.__super__ = ash_core_Entity;
gengine_Entity.prototype = $extend(ash_core_Entity.prototype,{
	add: function(component,componentClass) {
		if(js_Boot.__instanceof(component,gengine_components_Component)) {
			this.node.addComponent((js_Boot.__cast(component , gengine_components_Component)).object,0,0);
		}
		return ash_core_Entity.prototype.add.call(this,component,componentClass);
	}
	,remove: function(componentClass) {
		var component = ash_core_Entity.prototype.remove.call(this,componentClass);
		if(component != null && js_Boot.__instanceof(component,gengine_components_Component)) {
			this.node.removeComponent((js_Boot.__cast(component , gengine_components_Component)).object);
		}
		return component;
	}
	,set_position: function(position) {
		this.node.setPosition(position);
		return position;
	}
	,get_position: function() {
		return this.node.getPosition();
	}
	,set_scale: function(scale) {
		this.node.setScale(scale);
		return scale;
	}
	,get_scale: function() {
		return this.node.getScale();
	}
	,setPosition: function(position) {
		this.node.setPosition(position);
		return position;
	}
	,getPosition: function() {
		return this.node.getPosition();
	}
	,setScale: function(scale) {
		this.node.setScale(scale);
		return scale;
	}
	,getScale: function() {
		return this.node.getScale();
	}
	,setRotation2D: function(angle) {
		this.node.setRotation2D(angle);
	}
	,getRotation2D: function() {
		return this.node.getRotation2D();
	}
	,setDirection: function(direction) {
		this.node.setDirection(direction);
	}
	,getDirection: function() {
		return this.node.getDirection();
	}
	,getUp: function() {
		return this.node.getUp();
	}
	,getRight: function() {
		return this.node.getRight();
	}
	,setWorldPosition: function(position) {
		this.node.setWorldPosition(position);
	}
	,getWorldPosition: function() {
		return this.node.getWorldPosition();
	}
	,setWorldRotation2D: function(angle) {
		this.node.setWorldRotation2D(angle);
	}
	,getWorldRotation2D: function() {
		return this.node.getWorldRotation2D();
	}
	,setWorldScale: function(scale) {
		this.node.setWorldScale(scale);
	}
	,getWorldScale: function() {
		return this.node.getWorldScale();
	}
	,setParent: function(parent) {
		if(this._parent != null) {
			HxOverrides.remove(this._parent._children,this);
		}
		if(parent != null) {
			parent._children.push(this);
			this.node.setParent(parent.node);
			this._parent = parent;
		} else {
			this.node.setParent(null);
			this._parent = null;
		}
	}
	,getParent: function() {
		return this._parent;
	}
	,set_parent: function(parent) {
		if(this._parent != null) {
			HxOverrides.remove(this._parent._children,this);
		}
		if(parent != null) {
			parent._children.push(this);
			this.node.setParent(parent.node);
			this._parent = parent;
		} else {
			this.node.setParent(null);
			this._parent = null;
		}
		return parent;
	}
	,get_parent: function() {
		return this._parent;
	}
	,roll: function(angle,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 0;
		}
		this.node.roll(angle,transformSpace);
	}
	,yaw: function(angle,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 0;
		}
		this.node.yaw(angle,transformSpace);
	}
	,pitch: function(angle,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 0;
		}
		this.node.pitch(angle,transformSpace);
	}
	,lookAt: function(position,upVector,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 2;
		}
		if(upVector == null) {
			var this1 = Module.Vector3(0,1,0);
			upVector = this1;
		}
		this.node.lookAt(position,upVector,transformSpace);
	}
	,translate: function(delta,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 0;
		}
		this.node.translate(delta,transformSpace);
	}
	,translate2D: function(delta,transformSpace) {
		if(transformSpace == null) {
			transformSpace = 0;
		}
		this.node.translate2D(delta,transformSpace);
	}
	,__class__: gengine_Entity
});
var gengine_Main = function() { };
gengine_Main.__name__ = ["gengine","Main"];
gengine_Main.main = function() {
	window.Main = gengine_Main;
};
gengine_Main.init = function() {
	console.log("[gengine] Initializing...");
	Application.init();
};
gengine_Main.start = function() {
	console.log("[gengine] Starting...");
	gengine_Main.engine = new ash_core_Engine();
	gengine_Main.engine.entityAdded.add(gengine_Main.onEntityAdded);
	gengine_Main.engine.entityRemoved.add(gengine_Main.onEntityRemoved);
	window.dummyNode = gengine.getScene().createChild(0, 0, false);
	window.dummyNode.setName('dummyNode');
	window.dummyNode.setEnabled(false);
	gengine_Main.engine.addSystem(new gengine_systems_Physics2DSystem(),1);
	Application.start(gengine_Main.engine);
};
gengine_Main.update = function(dt) {
	gengine_Main.engine.update(dt);
};
gengine_Main.onEntityAdded = function(entity) {
	var scene = gengine.getScene();
	var gentity = js_Boot.__cast(entity , gengine_Entity);
	if(gentity._parent == null) {
		scene.addChild(entity.node, 1000);
	}
	var r = entity.get(gengine_components_RigidBody2D);
	if(r != null) {
		gengine_systems_Physics2DSystem.addEntity(r.object,entity);
	}
	var _g = 0;
	var _g1 = gentity._children;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		gengine_Main.engine.addEntity(c);
	}
};
gengine_Main.onEntityRemoved = function(entity) {
	var scene = gengine.getScene();
	var gentity = js_Boot.__cast(entity , gengine_Entity);
	if(gentity._parent == null) {
		scene.removeChild(entity.node);
	}
	var _g = 0;
	var _g1 = gentity._children;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		gengine_Main.engine.removeEntity(c);
	}
};
gengine_Main.onGuiLoaded = function() {
	var app = Application;
	if(typeof app.onGuiLoaded === "function") { app.onGuiLoaded(); }
};
gengine_Main.onPhysicsBeginContact2D = function(idA,idB) {
	var app = Application;
	if(typeof app.onPhysicsBeginContact2D === "function") {
		var entityA = gengine_systems_Physics2DSystem.urhoBodyToEntity.h[idA];
		var entityB = gengine_systems_Physics2DSystem.urhoBodyToEntity.h[idB];
		app.onPhysicsBeginContact2D(entityA, entityB);
	}
};
var gengine_components_Component = function() {
};
gengine_components_Component.__name__ = ["gengine","components","Component"];
gengine_components_Component.prototype = {
	__class__: gengine_components_Component
};
var gengine_components_Camera = function() {
	if(this.object == null) {
		this.object = new Module.Camera(gengine.getContext());
		if('Camera' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Component.call(this);
};
gengine_components_Camera.__name__ = ["gengine","components","Camera"];
gengine_components_Camera.__super__ = gengine_components_Component;
gengine_components_Camera.prototype = $extend(gengine_components_Component.prototype,{
	getTypeName: function() {
		return this.object.getTypeName();
	}
	,setNearClip: function(nearClip) {
		this.object.setNearClip(nearClip);
	}
	,setFarClip: function(farClip) {
		this.object.setFarClip(farClip);
	}
	,setFov: function(fov) {
		this.object.setFov(fov);
	}
	,setOrthoSize1: function(orthoSize) {
		this.object.setOrthoSize1(orthoSize);
	}
	,setOrthoSize: function(orthoSize) {
		this.object.setOrthoSize(orthoSize);
	}
	,setAspectRatio: function(aspectRatio) {
		this.object.setAspectRatio(aspectRatio);
	}
	,setFillMode: function(mode) {
		this.object.setFillMode(mode);
	}
	,setZoom: function(zoom) {
		this.object.setZoom(zoom);
	}
	,setLodBias: function(bias) {
		this.object.setLodBias(bias);
	}
	,setViewMask: function(mask) {
		this.object.setViewMask(mask);
	}
	,setViewOverrideFlags: function(flags) {
		this.object.setViewOverrideFlags(flags);
	}
	,setOrthographic: function(enable) {
		this.object.setOrthographic(enable);
	}
	,setAutoAspectRatio: function(enable) {
		this.object.setAutoAspectRatio(enable);
	}
	,setProjectionOffset: function(offset) {
		this.object.setProjectionOffset(offset);
	}
	,setUseReflection: function(enable) {
		this.object.setUseReflection(enable);
	}
	,setUseClipping: function(enable) {
		this.object.setUseClipping(enable);
	}
	,setFlipVertical: function(enable) {
		this.object.setFlipVertical(enable);
	}
	,getFarClip: function() {
		return this.object.getFarClip();
	}
	,getNearClip: function() {
		return this.object.getNearClip();
	}
	,getFov: function() {
		return this.object.getFov();
	}
	,getOrthoSize: function() {
		return this.object.getOrthoSize();
	}
	,getAspectRatio: function() {
		return this.object.getAspectRatio();
	}
	,getZoom: function() {
		return this.object.getZoom();
	}
	,getLodBias: function() {
		return this.object.getLodBias();
	}
	,getViewMask: function() {
		return this.object.getViewMask();
	}
	,getViewOverrideFlags: function() {
		return this.object.getViewOverrideFlags();
	}
	,getFillMode: function() {
		return this.object.getFillMode();
	}
	,isOrthographic: function() {
		return this.object.isOrthographic();
	}
	,getAutoAspectRatio: function() {
		return this.object.getAutoAspectRatio();
	}
	,getFrustumSize: function(near,far) {
		this.object.getFrustumSize(near,far);
	}
	,getHalfViewSize: function() {
		return this.object.getHalfViewSize();
	}
	,worldToScreenPoint: function(worldPos) {
		return this.object.worldToScreenPoint(worldPos);
	}
	,screenToWorldPoint: function(screenPos) {
		return this.object.screenToWorldPoint(screenPos);
	}
	,getProjectionOffset: function() {
		return this.object.getProjectionOffset();
	}
	,getUseReflection: function() {
		return this.object.getUseReflection();
	}
	,getUseClipping: function() {
		return this.object.getUseClipping();
	}
	,getFlipVertical: function() {
		return this.object.getFlipVertical();
	}
	,getReverseCulling: function() {
		return this.object.getReverseCulling();
	}
	,getDistance: function(worldPos) {
		return this.object.getDistance(worldPos);
	}
	,getDistanceSquared: function(worldPos) {
		return this.object.getDistanceSquared(worldPos);
	}
	,getLodDistance: function(distance,scale,bias) {
		return this.object.getLodDistance(distance,scale,bias);
	}
	,getFaceCameraRotation: function(position,rotation,mode,minAngle) {
		return this.object.getFaceCameraRotation(position,rotation,mode,minAngle);
	}
	,isProjectionValid: function() {
		return this.object.isProjectionValid();
	}
	,setAspectRatioInternal: function(aspectRatio) {
		this.object.setAspectRatioInternal(aspectRatio);
	}
	,setOrthoSizeAttr: function(orthoSize) {
		this.object.setOrthoSizeAttr(orthoSize);
	}
	,__class__: gengine_components_Camera
});
var gengine_components_CollisionShape2D = function() {
	if(this.object == null) {
		this.object = new Module.CollisionShape2D(gengine.getContext());
		if('CollisionShape2D' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Component.call(this);
};
gengine_components_CollisionShape2D.__name__ = ["gengine","components","CollisionShape2D"];
gengine_components_CollisionShape2D.__super__ = gengine_components_Component;
gengine_components_CollisionShape2D.prototype = $extend(gengine_components_Component.prototype,{
	getTypeName: function() {
		return this.object.getTypeName();
	}
	,onSetEnabled: function() {
		this.object.onSetEnabled();
	}
	,setTrigger: function(trigger) {
		this.object.setTrigger(trigger);
	}
	,setCategoryBits: function(categoryBits) {
		this.object.setCategoryBits(categoryBits);
	}
	,setMaskBits: function(maskBits) {
		this.object.setMaskBits(maskBits);
	}
	,setGroupIndex: function(groupIndex) {
		this.object.setGroupIndex(groupIndex);
	}
	,setDensity: function(density) {
		this.object.setDensity(density);
	}
	,setFriction: function(friction) {
		this.object.setFriction(friction);
	}
	,setRestitution: function(restitution) {
		this.object.setRestitution(restitution);
	}
	,createFixture: function() {
		this.object.createFixture();
	}
	,releaseFixture: function() {
		this.object.releaseFixture();
	}
	,isTrigger: function() {
		return this.object.isTrigger();
	}
	,getCategoryBits: function() {
		return this.object.getCategoryBits();
	}
	,getMaskBits: function() {
		return this.object.getMaskBits();
	}
	,getGroupIndex: function() {
		return this.object.getGroupIndex();
	}
	,getDensity: function() {
		return this.object.getDensity();
	}
	,getFriction: function() {
		return this.object.getFriction();
	}
	,getRestitution: function() {
		return this.object.getRestitution();
	}
	,getMass: function() {
		return this.object.getMass();
	}
	,getInertia: function() {
		return this.object.getInertia();
	}
	,getMassCenter: function() {
		return this.object.getMassCenter();
	}
	,__class__: gengine_components_CollisionShape2D
});
var gengine_components_Constraint2D = function() {
	if(this.object == null) {
		this.object = new Module.Constraint2D(gengine.getContext());
		if('Constraint2D' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Component.call(this);
};
gengine_components_Constraint2D.__name__ = ["gengine","components","Constraint2D"];
gengine_components_Constraint2D.__super__ = gengine_components_Component;
gengine_components_Constraint2D.prototype = $extend(gengine_components_Component.prototype,{
	getTypeName: function() {
		return this.object.getTypeName();
	}
	,applyAttributes: function() {
		this.object.applyAttributes();
	}
	,onSetEnabled: function() {
		this.object.onSetEnabled();
	}
	,createJoint: function() {
		this.object.createJoint();
	}
	,releaseJoint: function() {
		this.object.releaseJoint();
	}
	,setOtherBody: function(body) {
		this.object.setOtherBody(body);
	}
	,setCollideConnected: function(collideConnected) {
		this.object.setCollideConnected(collideConnected);
	}
	,setAttachedConstraint: function(constraint) {
		this.object.setAttachedConstraint(constraint);
	}
	,getOwnerBody: function() {
		return this.object.getOwnerBody();
	}
	,getOtherBody: function() {
		return this.object.getOtherBody();
	}
	,getCollideConnected: function() {
		return this.object.getCollideConnected();
	}
	,getAttachedConstraint: function() {
		return this.object.getAttachedConstraint();
	}
	,__class__: gengine_components_Constraint2D
});
var gengine_components_Drawable = function() {
	if(this.object == null) {
		this.object = new Module.Drawable(gengine.getContext());
		if('Drawable' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Component.call(this);
};
gengine_components_Drawable.__name__ = ["gengine","components","Drawable"];
gengine_components_Drawable.__super__ = gengine_components_Component;
gengine_components_Drawable.prototype = $extend(gengine_components_Component.prototype,{
	getTypeName: function() {
		return this.object.getTypeName();
	}
	,onSetEnabled: function() {
		this.object.onSetEnabled();
	}
	,getNumOccluderTriangles: function() {
		return this.object.getNumOccluderTriangles();
	}
	,setDrawDistance: function(distance) {
		this.object.setDrawDistance(distance);
	}
	,setShadowDistance: function(distance) {
		this.object.setShadowDistance(distance);
	}
	,setLodBias: function(bias) {
		this.object.setLodBias(bias);
	}
	,setViewMask: function(mask) {
		this.object.setViewMask(mask);
	}
	,setLightMask: function(mask) {
		this.object.setLightMask(mask);
	}
	,setShadowMask: function(mask) {
		this.object.setShadowMask(mask);
	}
	,setZoneMask: function(mask) {
		this.object.setZoneMask(mask);
	}
	,setMaxLights: function(num) {
		this.object.setMaxLights(num);
	}
	,setCastShadows: function(enable) {
		this.object.setCastShadows(enable);
	}
	,setOccluder: function(enable) {
		this.object.setOccluder(enable);
	}
	,setOccludee: function(enable) {
		this.object.setOccludee(enable);
	}
	,markForUpdate: function() {
		this.object.markForUpdate();
	}
	,getDrawableFlags: function() {
		return this.object.getDrawableFlags();
	}
	,getDrawDistance: function() {
		return this.object.getDrawDistance();
	}
	,getShadowDistance: function() {
		return this.object.getShadowDistance();
	}
	,getLodBias: function() {
		return this.object.getLodBias();
	}
	,getViewMask: function() {
		return this.object.getViewMask();
	}
	,getLightMask: function() {
		return this.object.getLightMask();
	}
	,getShadowMask: function() {
		return this.object.getShadowMask();
	}
	,getZoneMask: function() {
		return this.object.getZoneMask();
	}
	,getMaxLights: function() {
		return this.object.getMaxLights();
	}
	,getCastShadows: function() {
		return this.object.getCastShadows();
	}
	,isOccluder: function() {
		return this.object.isOccluder();
	}
	,isOccludee: function() {
		return this.object.isOccludee();
	}
	,isInView1: function() {
		return this.object.isInView1();
	}
	,isInView: function(camera) {
		return this.object.isInView(camera);
	}
	,setSortValue: function(value) {
		this.object.setSortValue(value);
	}
	,setMinMaxZ: function(minZ,maxZ) {
		this.object.setMinMaxZ(minZ,maxZ);
	}
	,markInView: function(frameNumber) {
		this.object.markInView(frameNumber);
	}
	,limitLights: function() {
		this.object.limitLights();
	}
	,limitVertexLights: function(removeConvertedLights) {
		this.object.limitVertexLights(removeConvertedLights);
	}
	,setBasePass: function(batchIndex) {
		this.object.setBasePass(batchIndex);
	}
	,isZoneDirty: function() {
		return this.object.isZoneDirty();
	}
	,getDistance: function() {
		return this.object.getDistance();
	}
	,getLodDistance: function() {
		return this.object.getLodDistance();
	}
	,getSortValue: function() {
		return this.object.getSortValue();
	}
	,hasBasePass: function(batchIndex) {
		return this.object.hasBasePass(batchIndex);
	}
	,getFirstLight: function() {
		return this.object.getFirstLight();
	}
	,getMinZ: function() {
		return this.object.getMinZ();
	}
	,getMaxZ: function() {
		return this.object.getMaxZ();
	}
	,addLight: function(light) {
		this.object.addLight(light);
	}
	,addVertexLight: function(light) {
		this.object.addVertexLight(light);
	}
	,__class__: gengine_components_Drawable
});
var gengine_components_Drawable2D = function() {
	if(this.object == null) {
		this.object = new Module.Drawable2D(gengine.getContext());
		if('Drawable2D' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Drawable.call(this);
};
gengine_components_Drawable2D.__name__ = ["gengine","components","Drawable2D"];
gengine_components_Drawable2D.__super__ = gengine_components_Drawable;
gengine_components_Drawable2D.prototype = $extend(gengine_components_Drawable.prototype,{
	getTypeName1: function() {
		return this.object.getTypeName1();
	}
	,onSetEnabled1: function() {
		this.object.onSetEnabled1();
	}
	,setLayer: function(layer) {
		this.object.setLayer(layer);
	}
	,setOrderInLayer: function(orderInLayer) {
		this.object.setOrderInLayer(orderInLayer);
	}
	,getLayer: function() {
		return this.object.getLayer();
	}
	,getOrderInLayer: function() {
		return this.object.getOrderInLayer();
	}
	,__class__: gengine_components_Drawable2D
});
var gengine_components_Light = function() {
	if(this.object == null) {
		this.object = new Module.Light(gengine.getContext());
		if('Light' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Drawable.call(this);
};
gengine_components_Light.__name__ = ["gengine","components","Light"];
gengine_components_Light.__super__ = gengine_components_Drawable;
gengine_components_Light.prototype = $extend(gengine_components_Drawable.prototype,{
	getTypeName1: function() {
		return this.object.getTypeName1();
	}
	,setLightType: function(type) {
		this.object.setLightType(type);
	}
	,setPerVertex: function(enable) {
		this.object.setPerVertex(enable);
	}
	,setColor: function(color) {
		this.object.setColor(color);
	}
	,setTemperature: function(temperature) {
		this.object.setTemperature(temperature);
	}
	,setRadius: function(radius) {
		this.object.setRadius(radius);
	}
	,setLength: function(length) {
		this.object.setLength(length);
	}
	,setUsePhysicalValues: function(enable) {
		this.object.setUsePhysicalValues(enable);
	}
	,setSpecularIntensity: function(intensity) {
		this.object.setSpecularIntensity(intensity);
	}
	,setBrightness: function(brightness) {
		this.object.setBrightness(brightness);
	}
	,setRange: function(range) {
		this.object.setRange(range);
	}
	,setFov: function(fov) {
		this.object.setFov(fov);
	}
	,setAspectRatio: function(aspectRatio) {
		this.object.setAspectRatio(aspectRatio);
	}
	,setFadeDistance: function(distance) {
		this.object.setFadeDistance(distance);
	}
	,setShadowFadeDistance: function(distance) {
		this.object.setShadowFadeDistance(distance);
	}
	,setShadowBias: function(parameters) {
		this.object.setShadowBias(parameters);
	}
	,setShadowCascade: function(parameters) {
		this.object.setShadowCascade(parameters);
	}
	,setShadowIntensity: function(intensity) {
		this.object.setShadowIntensity(intensity);
	}
	,setShadowResolution: function(resolution) {
		this.object.setShadowResolution(resolution);
	}
	,setShadowNearFarRatio: function(nearFarRatio) {
		this.object.setShadowNearFarRatio(nearFarRatio);
	}
	,setShadowMaxExtrusion: function(extrusion) {
		this.object.setShadowMaxExtrusion(extrusion);
	}
	,setRampTexture: function(texture) {
		this.object.setRampTexture(texture);
	}
	,setShapeTexture: function(texture) {
		this.object.setShapeTexture(texture);
	}
	,getLightType: function() {
		return this.object.getLightType();
	}
	,getPerVertex: function() {
		return this.object.getPerVertex();
	}
	,getColor: function() {
		return this.object.getColor();
	}
	,getTemperature: function() {
		return this.object.getTemperature();
	}
	,getRadius: function() {
		return this.object.getRadius();
	}
	,getLength: function() {
		return this.object.getLength();
	}
	,getUsePhysicalValues: function() {
		return this.object.getUsePhysicalValues();
	}
	,getColorFromTemperature: function() {
		return this.object.getColorFromTemperature();
	}
	,getSpecularIntensity: function() {
		return this.object.getSpecularIntensity();
	}
	,getBrightness: function() {
		return this.object.getBrightness();
	}
	,getEffectiveColor: function() {
		return this.object.getEffectiveColor();
	}
	,getEffectiveSpecularIntensity: function() {
		return this.object.getEffectiveSpecularIntensity();
	}
	,getRange: function() {
		return this.object.getRange();
	}
	,getFov: function() {
		return this.object.getFov();
	}
	,getAspectRatio: function() {
		return this.object.getAspectRatio();
	}
	,getFadeDistance: function() {
		return this.object.getFadeDistance();
	}
	,getShadowFadeDistance: function() {
		return this.object.getShadowFadeDistance();
	}
	,getShadowBias: function() {
		return this.object.getShadowBias();
	}
	,getShadowCascade: function() {
		return this.object.getShadowCascade();
	}
	,getShadowIntensity: function() {
		return this.object.getShadowIntensity();
	}
	,getShadowResolution: function() {
		return this.object.getShadowResolution();
	}
	,getShadowNearFarRatio: function() {
		return this.object.getShadowNearFarRatio();
	}
	,getShadowMaxExtrusion: function() {
		return this.object.getShadowMaxExtrusion();
	}
	,getRampTexture: function() {
		return this.object.getRampTexture();
	}
	,getShapeTexture: function() {
		return this.object.getShapeTexture();
	}
	,getNumShadowSplits: function() {
		return this.object.getNumShadowSplits();
	}
	,isNegative: function() {
		return this.object.isNegative();
	}
	,setIntensitySortValue: function(distance) {
		this.object.setIntensitySortValue(distance);
	}
	,getIntensityDivisor: function(attenuation) {
		return this.object.getIntensityDivisor(attenuation);
	}
	,__class__: gengine_components_Light
});
var gengine_components_RigidBody2D = function() {
	if(this.object == null) {
		this.object = new Module.RigidBody2D(gengine.getContext());
		if('RigidBody2D' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Component.call(this);
};
gengine_components_RigidBody2D.__name__ = ["gengine","components","RigidBody2D"];
gengine_components_RigidBody2D.__super__ = gengine_components_Component;
gengine_components_RigidBody2D.prototype = $extend(gengine_components_Component.prototype,{
	getTypeName: function() {
		return this.object.getTypeName();
	}
	,onSetEnabled: function() {
		this.object.onSetEnabled();
	}
	,setBodyType: function(bodyType) {
		this.object.setBodyType(bodyType);
	}
	,setMass: function(mass) {
		this.object.setMass(mass);
	}
	,setInertia: function(inertia) {
		this.object.setInertia(inertia);
	}
	,setMassCenter: function(center) {
		this.object.setMassCenter(center);
	}
	,setUseFixtureMass: function(useFixtureMass) {
		this.object.setUseFixtureMass(useFixtureMass);
	}
	,setLinearDamping: function(linearDamping) {
		this.object.setLinearDamping(linearDamping);
	}
	,setAngularDamping: function(angularDamping) {
		this.object.setAngularDamping(angularDamping);
	}
	,setAllowSleep: function(allowSleep) {
		this.object.setAllowSleep(allowSleep);
	}
	,setFixedRotation: function(fixedRotation) {
		this.object.setFixedRotation(fixedRotation);
	}
	,setBullet: function(bullet) {
		this.object.setBullet(bullet);
	}
	,setGravityScale: function(gravityScale) {
		this.object.setGravityScale(gravityScale);
	}
	,setAwake: function(awake) {
		this.object.setAwake(awake);
	}
	,setLinearVelocity: function(linearVelocity) {
		this.object.setLinearVelocity(linearVelocity);
	}
	,setAngularVelocity: function(angularVelocity) {
		this.object.setAngularVelocity(angularVelocity);
	}
	,applyForce: function(force,point,wake) {
		this.object.applyForce(force,point,wake);
	}
	,applyForceToCenter: function(force,wake) {
		this.object.applyForceToCenter(force,wake);
	}
	,applyTorque: function(torque,wake) {
		this.object.applyTorque(torque,wake);
	}
	,applyLinearImpulse: function(impulse,point,wake) {
		this.object.applyLinearImpulse(impulse,point,wake);
	}
	,applyLinearImpulseToCenter: function(impulse,wake) {
		this.object.applyLinearImpulseToCenter(impulse,wake);
	}
	,applyAngularImpulse: function(impulse,wake) {
		this.object.applyAngularImpulse(impulse,wake);
	}
	,createBody: function() {
		this.object.createBody();
	}
	,releaseBody: function() {
		this.object.releaseBody();
	}
	,applyWorldTransform1: function() {
		this.object.applyWorldTransform1();
	}
	,applyWorldTransform: function(newWorldPosition,newWorldRotation) {
		this.object.applyWorldTransform(newWorldPosition,newWorldRotation);
	}
	,addCollisionShape2D: function(collisionShape) {
		this.object.addCollisionShape2D(collisionShape);
	}
	,removeCollisionShape2D: function(collisionShape) {
		this.object.removeCollisionShape2D(collisionShape);
	}
	,addConstraint2D: function(constraint) {
		this.object.addConstraint2D(constraint);
	}
	,removeConstraint2D: function(constraint) {
		this.object.removeConstraint2D(constraint);
	}
	,getBodyType: function() {
		return this.object.getBodyType();
	}
	,getMass: function() {
		return this.object.getMass();
	}
	,getInertia: function() {
		return this.object.getInertia();
	}
	,getMassCenter: function() {
		return this.object.getMassCenter();
	}
	,getUseFixtureMass: function() {
		return this.object.getUseFixtureMass();
	}
	,getLinearDamping: function() {
		return this.object.getLinearDamping();
	}
	,getAngularDamping: function() {
		return this.object.getAngularDamping();
	}
	,isAllowSleep: function() {
		return this.object.isAllowSleep();
	}
	,isFixedRotation: function() {
		return this.object.isFixedRotation();
	}
	,isBullet: function() {
		return this.object.isBullet();
	}
	,getGravityScale: function() {
		return this.object.getGravityScale();
	}
	,isAwake: function() {
		return this.object.isAwake();
	}
	,getLinearVelocity: function() {
		return this.object.getLinearVelocity();
	}
	,getAngularVelocity: function() {
		return this.object.getAngularVelocity();
	}
	,__class__: gengine_components_RigidBody2D
});
var gengine_components_SoundSource = function() {
	if(this.object == null) {
		this.object = new Module.SoundSource(gengine.getContext());
		if('SoundSource' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Component.call(this);
};
gengine_components_SoundSource.__name__ = ["gengine","components","SoundSource"];
gengine_components_SoundSource.__super__ = gengine_components_Component;
gengine_components_SoundSource.prototype = $extend(gengine_components_Component.prototype,{
	getTypeName: function() {
		return this.object.getTypeName();
	}
	,seek: function(seekTime) {
		this.object.seek(seekTime);
	}
	,play1: function(sound) {
		this.object.play1(sound);
	}
	,play2: function(sound,frequency) {
		this.object.play2(sound,frequency);
	}
	,play3: function(sound,frequency,gain) {
		this.object.play3(sound,frequency,gain);
	}
	,play: function(sound,frequency,gain,panning) {
		this.object.play(sound,frequency,gain,panning);
	}
	,stop: function() {
		this.object.stop();
	}
	,setSoundType: function(type) {
		this.object.setSoundType(type);
	}
	,setFrequency: function(frequency) {
		this.object.setFrequency(frequency);
	}
	,setGain: function(gain) {
		this.object.setGain(gain);
	}
	,setAttenuation: function(attenuation) {
		this.object.setAttenuation(attenuation);
	}
	,setPanning: function(panning) {
		this.object.setPanning(panning);
	}
	,setAutoRemoveMode: function(mode) {
		this.object.setAutoRemoveMode(mode);
	}
	,getSound: function() {
		return this.object.getSound();
	}
	,getSoundType: function() {
		return this.object.getSoundType();
	}
	,getTimePosition: function() {
		return this.object.getTimePosition();
	}
	,getFrequency: function() {
		return this.object.getFrequency();
	}
	,getGain: function() {
		return this.object.getGain();
	}
	,getAttenuation: function() {
		return this.object.getAttenuation();
	}
	,getPanning: function() {
		return this.object.getPanning();
	}
	,getAutoRemoveMode: function() {
		return this.object.getAutoRemoveMode();
	}
	,isPlaying: function() {
		return this.object.isPlaying();
	}
	,update: function(timeStep) {
		this.object.update(timeStep);
	}
	,updateMasterGain: function() {
		this.object.updateMasterGain();
	}
	,setPositionAttr: function(value) {
		this.object.setPositionAttr(value);
	}
	,setPlayingAttr: function(value) {
		this.object.setPlayingAttr(value);
	}
	,getPositionAttr: function() {
		return this.object.getPositionAttr();
	}
	,__class__: gengine_components_SoundSource
});
var gengine_components_StaticSprite2D = function() {
	if(this.object == null) {
		this.object = new Module.StaticSprite2D(gengine.getContext());
		if('StaticSprite2D' == 'ParticleEmitter2D') { window.dummyNode.addComponent(this.object, 0, 0); }
	}
	gengine_components_Drawable2D.call(this);
};
gengine_components_StaticSprite2D.__name__ = ["gengine","components","StaticSprite2D"];
gengine_components_StaticSprite2D.__super__ = gengine_components_Drawable2D;
gengine_components_StaticSprite2D.prototype = $extend(gengine_components_Drawable2D.prototype,{
	getTypeName2: function() {
		return this.object.getTypeName2();
	}
	,setSprite: function(sprite) {
		this.object.setSprite(sprite);
	}
	,setDrawRect: function(rect) {
		this.object.setDrawRect(rect);
	}
	,setTextureRect: function(rect) {
		this.object.setTextureRect(rect);
	}
	,setBlendMode: function(blendMode) {
		this.object.setBlendMode(blendMode);
	}
	,setFlip: function(flipX,flipY) {
		this.object.setFlip(flipX,flipY);
	}
	,setFlipX: function(flipX) {
		this.object.setFlipX(flipX);
	}
	,setFlipY: function(flipY) {
		this.object.setFlipY(flipY);
	}
	,setColor: function(color) {
		this.object.setColor(color);
	}
	,setAlpha: function(alpha) {
		this.object.setAlpha(alpha);
	}
	,setUseHotSpot: function(useHotSpot) {
		this.object.setUseHotSpot(useHotSpot);
	}
	,setUseDrawRect: function(useDrawRect) {
		this.object.setUseDrawRect(useDrawRect);
	}
	,setUseTextureRect: function(useTextureRect) {
		this.object.setUseTextureRect(useTextureRect);
	}
	,setHotSpot: function(hotspot) {
		this.object.setHotSpot(hotspot);
	}
	,setCustomMaterial: function(customMaterial) {
		this.object.setCustomMaterial(customMaterial);
	}
	,getSprite: function() {
		return this.object.getSprite();
	}
	,getDrawRect: function() {
		return this.object.getDrawRect();
	}
	,getTextureRect: function() {
		return this.object.getTextureRect();
	}
	,getBlendMode: function() {
		return this.object.getBlendMode();
	}
	,getFlipX: function() {
		return this.object.getFlipX();
	}
	,getFlipY: function() {
		return this.object.getFlipY();
	}
	,getColor: function() {
		return this.object.getColor();
	}
	,getAlpha: function() {
		return this.object.getAlpha();
	}
	,getUseHotSpot: function() {
		return this.object.getUseHotSpot();
	}
	,getUseDrawRect: function() {
		return this.object.getUseDrawRect();
	}
	,getUseTextureRect: function() {
		return this.object.getUseTextureRect();
	}
	,getHotSpot: function() {
		return this.object.getHotSpot();
	}
	,getCustomMaterial: function() {
		return this.object.getCustomMaterial();
	}
	,__class__: gengine_components_StaticSprite2D
});
var gengine_math__$Color_Color_$Impl_$ = {};
gengine_math__$Color_Color_$Impl_$.__name__ = ["gengine","math","_Color","Color_Impl_"];
gengine_math__$Color_Color_$Impl_$._new = function(r,g,b,a) {
	if(a == null) {
		a = 1.0;
	}
	var this1 = Module.Color(r,g,b,a);
	return this1;
};
gengine_math__$Color_Color_$Impl_$.mul = function(a,b) {
	var this1 = Module.Color(a.r * b,a.g * b,a.b * b,a.a * b);
	return this1;
};
gengine_math__$Color_Color_$Impl_$.div = function(a,b) {
	var this1 = Module.Color(a.r / b,a.g / b,a.b / b,a.a / b);
	return this1;
};
gengine_math__$Color_Color_$Impl_$.add = function(a,b) {
	var this1 = Module.Color(a.r + b.r,a.g + b.g,a.b + b.b,a.a + b.a);
	return this1;
};
gengine_math__$Color_Color_$Impl_$.min = function(a,b) {
	var this1 = Module.Color(a.r - b.r,a.g - b.g,a.b - b.b,a.a - b.a);
	return this1;
};
var gengine_math__$Quaternion_Quaternion_$Impl_$ = {};
gengine_math__$Quaternion_Quaternion_$Impl_$.__name__ = ["gengine","math","_Quaternion","Quaternion_Impl_"];
gengine_math__$Quaternion_Quaternion_$Impl_$._new = function(w,x,y,z) {
	var this1 = Module.Quaternion(w,x,y,z);
	return this1;
};
var gengine_math__$Vector2_Vector2_$Impl_$ = {};
gengine_math__$Vector2_Vector2_$Impl_$.__name__ = ["gengine","math","_Vector2","Vector2_Impl_"];
gengine_math__$Vector2_Vector2_$Impl_$._new = function(x,y) {
	var this1 = Module.Vector2(x,y);
	return this1;
};
gengine_math__$Vector2_Vector2_$Impl_$.mul = function(a,b) {
	var this1 = Module.Vector2(a.x * b,a.y * b);
	return this1;
};
gengine_math__$Vector2_Vector2_$Impl_$.div = function(a,b) {
	var this1 = Module.Vector2(a.x / b,a.y / b);
	return this1;
};
gengine_math__$Vector2_Vector2_$Impl_$.add = function(a,b) {
	var this1 = Module.Vector2(a.x + b.x,a.y + b.y);
	return this1;
};
gengine_math__$Vector2_Vector2_$Impl_$.min = function(a,b) {
	var this1 = Module.Vector2(a.x - b.x,a.y - b.y);
	return this1;
};
var gengine_math__$Vector3_Vector3_$Impl_$ = {};
gengine_math__$Vector3_Vector3_$Impl_$.__name__ = ["gengine","math","_Vector3","Vector3_Impl_"];
gengine_math__$Vector3_Vector3_$Impl_$._new = function(x,y,z) {
	var this1 = Module.Vector3(x,y,z);
	return this1;
};
gengine_math__$Vector3_Vector3_$Impl_$.mul = function(a,b) {
	var this1 = Module.Vector3(a.x * b,a.y * b,a.z * b);
	return this1;
};
gengine_math__$Vector3_Vector3_$Impl_$.div = function(a,b) {
	var this1 = Module.Vector3(a.x / b,a.y / b,a.z / b);
	return this1;
};
gengine_math__$Vector3_Vector3_$Impl_$.add = function(a,b) {
	var this1 = Module.Vector3(a.x + b.x,a.y + b.y,a.z + b.z);
	return this1;
};
gengine_math__$Vector3_Vector3_$Impl_$.min = function(a,b) {
	var this1 = Module.Vector3(a.x - b.x,a.y - b.y,a.z - b.z);
	return this1;
};
var gengine_nodes_Physics2DNode = function() { };
gengine_nodes_Physics2DNode.__name__ = ["gengine","nodes","Physics2DNode"];
gengine_nodes_Physics2DNode._getComponents = function() {
	if(gengine_nodes_Physics2DNode._components == null) {
		gengine_nodes_Physics2DNode._components = new ash_ClassMap();
		var _this = gengine_nodes_Physics2DNode._components;
		var k = gengine_components_RigidBody2D;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"body");
		} else {
			_this2.h[name] = "body";
		}
	}
	return gengine_nodes_Physics2DNode._components;
};
gengine_nodes_Physics2DNode.__super__ = ash_core_Node;
gengine_nodes_Physics2DNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: gengine_nodes_Physics2DNode
});
var gengine_systems_Physics2DSystem = function() {
	ash_tools_ListIteratingSystem.call(this,gengine_nodes_Physics2DNode,null,null,$bind(this,this.onNodeRemoved));
};
gengine_systems_Physics2DSystem.__name__ = ["gengine","systems","Physics2DSystem"];
gengine_systems_Physics2DSystem.addEntity = function(urhoBody,entity) {
	var this1 = gengine_systems_Physics2DSystem.urhoBodyToEntity;
	var key = urhoBody.getID();
	this1.h[key] = entity;
};
gengine_systems_Physics2DSystem.getEntity = function(urhoBody) {
	if(urhoBody == null) {
		return null;
	} else {
		var this1 = gengine_systems_Physics2DSystem.urhoBodyToEntity;
		var key = urhoBody.getID();
		return this1.h[key];
	}
};
gengine_systems_Physics2DSystem.__super__ = ash_tools_ListIteratingSystem;
gengine_systems_Physics2DSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	onNodeRemoved: function(node) {
		gengine_systems_Physics2DSystem.urhoBodyToEntity.remove(node.body.object.getID());
	}
	,__class__: gengine_systems_Physics2DSystem
});
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_PagesSet = function(parent_,showOptions_,hideOptions_) {
	this.currentPageIndex = 0;
	this.parent = parent_;
	this.showOptions = showOptions_;
	this.hideOptions = hideOptions_;
};
js_PagesSet.__name__ = ["js","PagesSet"];
js_PagesSet.prototype = {
	showPage: function(selector) {
		var _gthis = this;
		var page;
		if(typeof(selector) == "number" && ((selector | 0) === selector)) {
			page = $(this.parent.children()[selector]);
		} else if(typeof(selector) == "string") {
			page = this.parent.find(selector);
		} else {
			page = selector;
		}
		this.parent.children().each(function(index,element) {
			var that = $(this);
			if(that[0] != page[0]) {
				that.hide(_gthis.hideOptions);
			} else {
				that.show(_gthis.showOptions);
				_gthis.currentPage = that;
				_gthis.currentPageId = that.attr("id");
				_gthis.currentPageIndex = that.index();
			}
		});
	}
	,nextPage: function() {
		var index = this.currentPageIndex + 1;
		var len = this.parent.children().length;
		if(index >= len) {
			index -= len;
		}
		this.showPage(index);
	}
	,previousPage: function() {
		var index = this.currentPageIndex - 1;
		if(index < 0) {
			index += this.parent.children().length;
		}
		this.showPage(index);
	}
	,__class__: js_PagesSet
};
var js_UIPages = function() { };
js_UIPages.__name__ = ["js","UIPages"];
js_UIPages.main = function() {
	window.jQuery.prototype["uiPages"] = js_UIPages.uiPages;
};
js_UIPages.uiPages = function(parameter1,parameter2) {
	var that = this;
	if(parameter1 == null || parameter1 != null && parameter2 != null) {
		js_UIPages.createSet(that,parameter1,parameter2);
	} else if(parameter1 == "next") {
		js_UIPages.instances.h[that.__id__].nextPage();
	} else if(parameter1 == "previous") {
		js_UIPages.instances.h[that.__id__].previousPage();
	} else if(parameter1 != null) {
		js_UIPages.instances.h[that.__id__].showPage(parameter1);
	}
	return that;
};
js_UIPages.createSet = function(parent,showOptions,hideOptions) {
	var instance = new js_PagesSet(parent,showOptions,hideOptions);
	js_UIPages.instances.set(parent,instance);
	return instance;
};
var nodes_TileDisappearingNode = function() { };
nodes_TileDisappearingNode.__name__ = ["nodes","TileDisappearingNode"];
nodes_TileDisappearingNode._getComponents = function() {
	if(nodes_TileDisappearingNode._components == null) {
		nodes_TileDisappearingNode._components = new ash_ClassMap();
		var _this = nodes_TileDisappearingNode._components;
		var k = components_Tile;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"tile");
		} else {
			_this2.h[name] = "tile";
		}
		var _this3 = nodes_TileDisappearingNode._components;
		var k1 = gengine_components_StaticSprite2D;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"sprite");
		} else {
			_this5.h[name1] = "sprite";
		}
		var _this6 = nodes_TileDisappearingNode._components;
		var k2 = components_TileDisappearing;
		var name2 = Type.getClassName(k2);
		var _this7 = _this6.keyMap;
		if(__map_reserved[name2] != null) {
			_this7.setReserved(name2,k2);
		} else {
			_this7.h[name2] = k2;
		}
		var _this8 = _this6.valueMap;
		if(__map_reserved[name2] != null) {
			_this8.setReserved(name2,"tileDisappearing");
		} else {
			_this8.h[name2] = "tileDisappearing";
		}
	}
	return nodes_TileDisappearingNode._components;
};
nodes_TileDisappearingNode.__super__ = ash_core_Node;
nodes_TileDisappearingNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: nodes_TileDisappearingNode
});
var nodes_TileMovementNode = function() { };
nodes_TileMovementNode.__name__ = ["nodes","TileMovementNode"];
nodes_TileMovementNode._getComponents = function() {
	if(nodes_TileMovementNode._components == null) {
		nodes_TileMovementNode._components = new ash_ClassMap();
		var _this = nodes_TileMovementNode._components;
		var k = components_Tile;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"tile");
		} else {
			_this2.h[name] = "tile";
		}
		var _this3 = nodes_TileMovementNode._components;
		var k1 = gengine_components_StaticSprite2D;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"sprite");
		} else {
			_this5.h[name1] = "sprite";
		}
		var _this6 = nodes_TileMovementNode._components;
		var k2 = components_TileMovement;
		var name2 = Type.getClassName(k2);
		var _this7 = _this6.keyMap;
		if(__map_reserved[name2] != null) {
			_this7.setReserved(name2,k2);
		} else {
			_this7.h[name2] = k2;
		}
		var _this8 = _this6.valueMap;
		if(__map_reserved[name2] != null) {
			_this8.setReserved(name2,"tileMovement");
		} else {
			_this8.h[name2] = "tileMovement";
		}
	}
	return nodes_TileMovementNode._components;
};
nodes_TileMovementNode.__super__ = ash_core_Node;
nodes_TileMovementNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: nodes_TileMovementNode
});
var nodes_TileNode = function() { };
nodes_TileNode.__name__ = ["nodes","TileNode"];
nodes_TileNode._getComponents = function() {
	if(nodes_TileNode._components == null) {
		nodes_TileNode._components = new ash_ClassMap();
		var _this = nodes_TileNode._components;
		var k = components_Tile;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"tile");
		} else {
			_this2.h[name] = "tile";
		}
		var _this3 = nodes_TileNode._components;
		var k1 = gengine_components_StaticSprite2D;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"sprite");
		} else {
			_this5.h[name1] = "sprite";
		}
	}
	return nodes_TileNode._components;
};
nodes_TileNode.__super__ = ash_core_Node;
nodes_TileNode.prototype = $extend(ash_core_Node.prototype,{
	disappear: function() {
		var _this = this.sprite;
		var this1 = Module.Color(1.0,0.0,1.0,1.0);
		_this.object.setColor(this1);
		this.tile.sm.changeState("disappearing");
		this.tile.matching = true;
	}
	,__class__: nodes_TileNode
});
var pathfinder_Coordinate = function(p_x,p_y) {
	if(p_y == null) {
		p_y = 0;
	}
	if(p_x == null) {
		p_x = 0;
	}
	this.x = p_x;
	this.y = p_y;
};
pathfinder_Coordinate.__name__ = ["pathfinder","Coordinate"];
pathfinder_Coordinate.prototype = {
	isEqualTo: function(p_coordinate) {
		if(this.x == p_coordinate.x) {
			return this.y == p_coordinate.y;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "(" + this.x + "," + this.y + ")";
	}
	,clone: function() {
		return new pathfinder_Coordinate(this.x,this.y);
	}
	,__class__: pathfinder_Coordinate
};
var pathfinder_EHeuristic = { __ename__ : true, __constructs__ : ["DIAGONAL","PRODUCT","EUCLIDIAN","MANHATTAN"] };
pathfinder_EHeuristic.DIAGONAL = ["DIAGONAL",0];
pathfinder_EHeuristic.DIAGONAL.__enum__ = pathfinder_EHeuristic;
pathfinder_EHeuristic.PRODUCT = ["PRODUCT",1];
pathfinder_EHeuristic.PRODUCT.__enum__ = pathfinder_EHeuristic;
pathfinder_EHeuristic.EUCLIDIAN = ["EUCLIDIAN",2];
pathfinder_EHeuristic.EUCLIDIAN.__enum__ = pathfinder_EHeuristic;
pathfinder_EHeuristic.MANHATTAN = ["MANHATTAN",3];
pathfinder_EHeuristic.MANHATTAN.__enum__ = pathfinder_EHeuristic;
var pathfinder_IMap = function() { };
pathfinder_IMap.__name__ = ["pathfinder","IMap"];
pathfinder_IMap.prototype = {
	__class__: pathfinder_IMap
};
var pathfinder_Node = function(p_x,p_y,p_isWalkable) {
	if(p_isWalkable == null) {
		p_isWalkable = true;
	}
	this.isWalkable = p_isWalkable;
	pathfinder_Coordinate.call(this,p_x,p_y);
};
pathfinder_Node.__name__ = ["pathfinder","Node"];
pathfinder_Node.__super__ = pathfinder_Coordinate;
pathfinder_Node.prototype = $extend(pathfinder_Coordinate.prototype,{
	toString: function() {
		var l_result = "[Node(" + this.x + "," + this.y + ")";
		if(this.parent != null) {
			l_result += ", parent=(" + this.parent.x + "," + this.parent.y + ")";
		}
		l_result += ", " + (this.isWalkable ? "W" : "X");
		l_result += ", f=" + this.f;
		l_result += ", g=" + this.g;
		l_result += "]";
		return l_result;
	}
	,__class__: pathfinder_Node
});
var pathfinder_Pathfinder = function(p_map,p_timeOutDuration) {
	if(p_timeOutDuration == null) {
		p_timeOutDuration = 10000;
	}
	this.configure(p_map,p_timeOutDuration);
};
pathfinder_Pathfinder.__name__ = ["pathfinder","Pathfinder"];
pathfinder_Pathfinder.prototype = {
	configure: function(p_map,p_timeOutDuration) {
		if(p_timeOutDuration == null) {
			p_timeOutDuration = 10000;
		}
		this._map = p_map;
		this._timeOutDuration = p_timeOutDuration;
		this._nodes = [];
		this._cols = this._map.cols;
		this._rows = this._map.rows;
		var _g1 = 0;
		var _g = this._map.cols;
		while(_g1 < _g) {
			var l_ix = _g1++;
			var l_line = this._nodes[l_ix] = [];
			var _g3 = 0;
			var _g2 = this._map.rows;
			while(_g3 < _g2) {
				var l_iy = _g3++;
				l_line[l_iy] = new pathfinder_Node(l_ix,l_iy,this._map.isWalkable(l_ix,l_iy));
			}
		}
	}
	,_getCost: function(p_node1,p_node2,p_heuristic) {
		switch(p_heuristic[1]) {
		case 0:
			var p_value = p_node1.x - p_node2.x;
			var l_dx = p_value < 0 ? -p_value : p_value;
			var p_value1 = p_node1.y - p_node2.y;
			var l_dy = p_value1 < 0 ? -p_value1 : p_value1;
			var l_diag = l_dx < l_dy ? l_dx : l_dy;
			var l_straight = l_dx + l_dy;
			return 10 * (l_straight - 2 * l_diag) + 14 * l_diag;
		case 1:
			var p_value2 = p_node1.x - this._destNode.x;
			var l_dx1 = p_value2 < 0 ? -p_value2 : p_value2;
			var p_value3 = p_node1.y - this._destNode.y;
			var l_dy1 = p_value3 < 0 ? -p_value3 : p_value3;
			var p_value4 = this._startNode.x - this._destNode.x;
			var l_dx2 = p_value4 < 0 ? -p_value4 : p_value4;
			var p_value5 = this._startNode.y - this._destNode.y;
			var l_dy2 = p_value5 < 0 ? -p_value5 : p_value5;
			var p_value6 = l_dx1 * l_dy2 - l_dx2 * l_dy1;
			var l_cross = (p_value6 < 0 ? -p_value6 : p_value6) * .01;
			var p_value7 = p_node1.x - p_node2.x;
			var l_dx3 = p_value7 < 0 ? -p_value7 : p_value7;
			var p_value8 = p_node1.y - p_node2.y;
			var l_dy3 = p_value8 < 0 ? -p_value8 : p_value8;
			var l_diag1 = l_dx3 < l_dy3 ? l_dx3 : l_dy3;
			var l_straight1 = l_dx3 + l_dy3;
			return 10 * (l_straight1 - 2 * l_diag1) + 14 * l_diag1 + l_cross;
		case 2:
			var p_value9 = p_node1.x - p_node2.x;
			var l_dx4 = p_value9 < 0 ? -p_value9 : p_value9;
			var p_value10 = p_node1.y - p_node2.y;
			var l_dy4 = p_value10 < 0 ? -p_value10 : p_value10;
			return Math.sqrt(l_dx4 * l_dx4 + l_dy4 * l_dy4) * 10;
		case 3:
			var l_dx5 = p_node1.x - p_node2.x;
			var l_dy5 = p_node1.y - p_node2.y;
			return ((l_dx5 > 0 ? l_dx5 : -l_dx5) + (l_dy5 > 0 ? l_dy5 : -l_dy5)) * 10;
		}
	}
	,_getCostDiagonal: function(p_node1,p_node2) {
		var p_value = p_node1.x - p_node2.x;
		var l_dx = p_value < 0 ? -p_value : p_value;
		var p_value1 = p_node1.y - p_node2.y;
		var l_dy = p_value1 < 0 ? -p_value1 : p_value1;
		var l_diag = l_dx < l_dy ? l_dx : l_dy;
		var l_straight = l_dx + l_dy;
		return 10 * (l_straight - 2 * l_diag) + 14 * l_diag;
	}
	,_getCostProduct: function(p_node1,p_node2) {
		var p_value = p_node1.x - this._destNode.x;
		var l_dx1 = p_value < 0 ? -p_value : p_value;
		var p_value1 = p_node1.y - this._destNode.y;
		var l_dy1 = p_value1 < 0 ? -p_value1 : p_value1;
		var p_value2 = this._startNode.x - this._destNode.x;
		var l_dx2 = p_value2 < 0 ? -p_value2 : p_value2;
		var p_value3 = this._startNode.y - this._destNode.y;
		var l_dy2 = p_value3 < 0 ? -p_value3 : p_value3;
		var p_value4 = l_dx1 * l_dy2 - l_dx2 * l_dy1;
		var l_cross = (p_value4 < 0 ? -p_value4 : p_value4) * .01;
		var p_value5 = p_node1.x - p_node2.x;
		var l_dx = p_value5 < 0 ? -p_value5 : p_value5;
		var p_value6 = p_node1.y - p_node2.y;
		var l_dy = p_value6 < 0 ? -p_value6 : p_value6;
		var l_diag = l_dx < l_dy ? l_dx : l_dy;
		var l_straight = l_dx + l_dy;
		return 10 * (l_straight - 2 * l_diag) + 14 * l_diag + l_cross;
	}
	,_getCostEuclidian: function(p_node1,p_node2) {
		var p_value = p_node1.x - p_node2.x;
		var l_dx = p_value < 0 ? -p_value : p_value;
		var p_value1 = p_node1.y - p_node2.y;
		var l_dy = p_value1 < 0 ? -p_value1 : p_value1;
		return Math.sqrt(l_dx * l_dx + l_dy * l_dy) * 10;
	}
	,_getCostManhattan: function(p_node1,p_node2) {
		var l_dx = p_node1.x - p_node2.x;
		var l_dy = p_node1.y - p_node2.y;
		return ((l_dx > 0 ? l_dx : -l_dx) + (l_dy > 0 ? l_dy : -l_dy)) * 10;
	}
	,createPath: function(p_start,p_dest,p_heuristic,p_isDiagonalEnabled,p_isMapDynamic) {
		if(p_isMapDynamic == null) {
			p_isMapDynamic = false;
		}
		if(p_isDiagonalEnabled == null) {
			p_isDiagonalEnabled = true;
		}
		if(p_heuristic == null) {
			p_heuristic = pathfinder_EHeuristic.PRODUCT;
		}
		this._info = { heuristic : p_heuristic, timeElapsed : 0, pathLength : 0, isDiagonalEnabled : p_isDiagonalEnabled};
		if(!this._map.isWalkable(p_start.x,p_start.y) || !this._map.isWalkable(p_dest.x,p_dest.y) || p_start.isEqualTo(p_dest)) {
			return null;
		}
		this._openList = [];
		this._closedList = [];
		this._startNode = this._nodes[p_start.x][p_start.y];
		this._destNode = this._nodes[p_dest.x][p_dest.y];
		this._startNode.g = 0;
		var p_node1 = this._startNode;
		var p_node2 = this._destNode;
		var tmp;
		switch(p_heuristic[1]) {
		case 0:
			var p_value = p_node1.x - p_node2.x;
			var l_dx = p_value < 0 ? -p_value : p_value;
			var p_value1 = p_node1.y - p_node2.y;
			var l_dy = p_value1 < 0 ? -p_value1 : p_value1;
			var l_diag = l_dx < l_dy ? l_dx : l_dy;
			var l_straight = l_dx + l_dy;
			tmp = 10 * (l_straight - 2 * l_diag) + 14 * l_diag;
			break;
		case 1:
			var p_value2 = p_node1.x - this._destNode.x;
			var l_dx1 = p_value2 < 0 ? -p_value2 : p_value2;
			var p_value3 = p_node1.y - this._destNode.y;
			var l_dy1 = p_value3 < 0 ? -p_value3 : p_value3;
			var p_value4 = this._startNode.x - this._destNode.x;
			var l_dx2 = p_value4 < 0 ? -p_value4 : p_value4;
			var p_value5 = this._startNode.y - this._destNode.y;
			var l_dy2 = p_value5 < 0 ? -p_value5 : p_value5;
			var p_value6 = l_dx1 * l_dy2 - l_dx2 * l_dy1;
			var l_cross = (p_value6 < 0 ? -p_value6 : p_value6) * .01;
			var p_value7 = p_node1.x - p_node2.x;
			var l_dx3 = p_value7 < 0 ? -p_value7 : p_value7;
			var p_value8 = p_node1.y - p_node2.y;
			var l_dy3 = p_value8 < 0 ? -p_value8 : p_value8;
			var l_diag1 = l_dx3 < l_dy3 ? l_dx3 : l_dy3;
			var l_straight1 = l_dx3 + l_dy3;
			tmp = 10 * (l_straight1 - 2 * l_diag1) + 14 * l_diag1 + l_cross;
			break;
		case 2:
			var p_value9 = p_node1.x - p_node2.x;
			var l_dx4 = p_value9 < 0 ? -p_value9 : p_value9;
			var p_value10 = p_node1.y - p_node2.y;
			var l_dy4 = p_value10 < 0 ? -p_value10 : p_value10;
			tmp = Math.sqrt(l_dx4 * l_dx4 + l_dy4 * l_dy4) * 10;
			break;
		case 3:
			var l_dx5 = p_node1.x - p_node2.x;
			var l_dy5 = p_node1.y - p_node2.y;
			tmp = ((l_dx5 > 0 ? l_dx5 : -l_dx5) + (l_dy5 > 0 ? l_dy5 : -l_dy5)) * 10;
			break;
		}
		this._startNode.f = tmp;
		this._openList.push(this._startNode);
		return this._searchPath(p_heuristic,p_isDiagonalEnabled,p_isMapDynamic);
	}
	,_getPath: function() {
		var l_path = [];
		var l_node = this._destNode;
		l_path[0] = l_node.clone();
		while(true) {
			l_node = l_node.parent;
			l_path.unshift(l_node.clone());
			if(l_node == this._startNode) {
				break;
			}
		}
		return l_path;
	}
	,_searchPath: function(p_heuristic,p_isDiagonalEnabled,p_isMapDynamic) {
		if(p_isMapDynamic == null) {
			p_isMapDynamic = false;
		}
		if(p_isDiagonalEnabled == null) {
			p_isDiagonalEnabled = true;
		}
		var l_minX;
		var l_maxX;
		var l_minY;
		var l_maxY;
		var l_isWalkable;
		var l_g;
		var l_f;
		var l_cost;
		var l_nextNode = null;
		var l_currentNode = this._startNode;
		var l_startTime = new Date().getTime() / 1000;
		this._isCompleted = false;
		while(!this._isCompleted) {
			if(l_currentNode.x - 1 < 0) {
				l_minX = 0;
			} else {
				l_minX = l_currentNode.x - 1;
			}
			if(l_currentNode.x + 1 >= this._cols) {
				l_maxX = this._cols - 1;
			} else {
				l_maxX = l_currentNode.x + 1;
			}
			if(l_currentNode.y - 1 < 0) {
				l_minY = 0;
			} else {
				l_minY = l_currentNode.y - 1;
			}
			if(l_currentNode.y + 1 >= this._rows) {
				l_maxY = this._rows - 1;
			} else {
				l_maxY = l_currentNode.y + 1;
			}
			var _g1 = l_minY;
			var _g = l_maxY + 1;
			while(_g1 < _g) {
				var l_iy = _g1++;
				var _g3 = l_minX;
				var _g2 = l_maxX + 1;
				while(_g3 < _g2) {
					var l_ix = _g3++;
					l_nextNode = this._nodes[l_ix][l_iy];
					if(!(!p_isMapDynamic && l_nextNode.isWalkable)) {
						if(p_isMapDynamic) {
							l_isWalkable = this._map.isWalkable(l_ix,l_iy);
						} else {
							l_isWalkable = false;
						}
					} else {
						l_isWalkable = true;
					}
					if(l_nextNode == l_currentNode || !l_isWalkable) {
						continue;
					}
					l_cost = 10;
					if(!(l_currentNode.x == l_nextNode.x || l_currentNode.y == l_nextNode.y)) {
						if(!p_isDiagonalEnabled) {
							continue;
						}
						l_cost = 14;
					}
					l_g = l_currentNode.g + l_cost;
					var p_node2 = this._destNode;
					var l_f1;
					switch(p_heuristic[1]) {
					case 0:
						var p_value = l_nextNode.x - p_node2.x;
						var l_dx = p_value < 0 ? -p_value : p_value;
						var p_value1 = l_nextNode.y - p_node2.y;
						var l_dy = p_value1 < 0 ? -p_value1 : p_value1;
						var l_diag = l_dx < l_dy ? l_dx : l_dy;
						var l_straight = l_dx + l_dy;
						l_f1 = 10 * (l_straight - 2 * l_diag) + 14 * l_diag;
						break;
					case 1:
						var p_value2 = l_nextNode.x - this._destNode.x;
						var l_dx1 = p_value2 < 0 ? -p_value2 : p_value2;
						var p_value3 = l_nextNode.y - this._destNode.y;
						var l_dy1 = p_value3 < 0 ? -p_value3 : p_value3;
						var p_value4 = this._startNode.x - this._destNode.x;
						var l_dx2 = p_value4 < 0 ? -p_value4 : p_value4;
						var p_value5 = this._startNode.y - this._destNode.y;
						var l_dy2 = p_value5 < 0 ? -p_value5 : p_value5;
						var p_value6 = l_dx1 * l_dy2 - l_dx2 * l_dy1;
						var l_cross = (p_value6 < 0 ? -p_value6 : p_value6) * .01;
						var p_value7 = l_nextNode.x - p_node2.x;
						var l_dx3 = p_value7 < 0 ? -p_value7 : p_value7;
						var p_value8 = l_nextNode.y - p_node2.y;
						var l_dy3 = p_value8 < 0 ? -p_value8 : p_value8;
						var l_diag1 = l_dx3 < l_dy3 ? l_dx3 : l_dy3;
						var l_straight1 = l_dx3 + l_dy3;
						l_f1 = 10 * (l_straight1 - 2 * l_diag1) + 14 * l_diag1 + l_cross;
						break;
					case 2:
						var p_value9 = l_nextNode.x - p_node2.x;
						var l_dx4 = p_value9 < 0 ? -p_value9 : p_value9;
						var p_value10 = l_nextNode.y - p_node2.y;
						var l_dy4 = p_value10 < 0 ? -p_value10 : p_value10;
						l_f1 = Math.sqrt(l_dx4 * l_dx4 + l_dy4 * l_dy4) * 10;
						break;
					case 3:
						var l_dx5 = l_nextNode.x - p_node2.x;
						var l_dy5 = l_nextNode.y - p_node2.y;
						l_f1 = ((l_dx5 > 0 ? l_dx5 : -l_dx5) + (l_dy5 > 0 ? l_dy5 : -l_dy5)) * 10;
						break;
					}
					l_f = l_g + l_f1;
					if(this._openList.indexOf(l_nextNode) != -1 || this._closedList.indexOf(l_nextNode) != -1) {
						if(l_nextNode.f > l_f) {
							l_nextNode.f = l_f;
							l_nextNode.g = l_g;
							l_nextNode.parent = l_currentNode;
						}
					} else {
						l_nextNode.f = l_f;
						l_nextNode.g = l_g;
						l_nextNode.parent = l_currentNode;
						this._openList.push(l_nextNode);
					}
				}
				var tmp = (new Date().getTime() / 1000 - l_startTime) * 1000 | 0;
				this._info.timeElapsed = tmp;
				if(this._info.timeElapsed > this._timeOutDuration) {
					return null;
				}
			}
			this._closedList.push(l_currentNode);
			if(this._openList.length == 0) {
				return null;
			}
			this._openList.sort($bind(this,this._sort));
			l_currentNode = this._openList.shift();
			if(l_currentNode == this._destNode) {
				this._isCompleted = true;
			}
		}
		var tmp1 = (new Date().getTime() / 1000 - l_startTime) * 1000 | 0;
		this._info.timeElapsed = tmp1;
		var l_path = [];
		var l_node = this._destNode;
		l_path[0] = l_node.clone();
		while(true) {
			l_node = l_node.parent;
			l_path.unshift(l_node.clone());
			if(l_node == this._startNode) {
				break;
			}
		}
		var l_path1 = l_path;
		this._info.pathLength = l_path1.length;
		return l_path1;
	}
	,_sort: function(p_x,p_y) {
		if(p_x.f > p_y.f) {
			return 1;
		} else if(p_x.f < p_y.f) {
			return -1;
		} else {
			return 0;
		}
	}
	,_intAbs: function(p_value) {
		if(p_value < 0) {
			return -p_value;
		} else {
			return p_value;
		}
	}
	,_intMin: function(p_v1,p_v2) {
		if(p_v1 < p_v2) {
			return p_v1;
		} else {
			return p_v2;
		}
	}
	,getInfo: function() {
		if(this._isCompleted) {
			return "Success using " + Std.string(this._info.heuristic) + (!this._info.isDiagonalEnabled ? " (and diagonals disabled )" : "") + " with a path length of " + this._info.pathLength + " taking " + this._info.timeElapsed + "ms";
		} else {
			return "Fail";
		}
	}
	,__class__: pathfinder_Pathfinder
};
var systems_AudioSystem = function() {
	this.nextSoundSourceIndex = 0;
	this.sounds = new haxe_ds_StringMap();
	ash_core_System.call(this);
	this.add("pop");
	this.add("deny");
	this.add("match");
};
systems_AudioSystem.__name__ = ["systems","AudioSystem"];
systems_AudioSystem.__super__ = ash_core_System;
systems_AudioSystem.prototype = $extend(ash_core_System.prototype,{
	add: function(name) {
		var this1 = this.sounds;
		var v = gengine.getResourceCache().getSound(name + ".wav",true);
		var _this = this1;
		var value = v;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	,addToEngine: function(_engine) {
		this.engine = _engine;
		var this1 = new Array(8);
		this.soundSources = this1;
		var _g1 = 0;
		var _g = this.soundSources.length;
		while(_g1 < _g) {
			var i = _g1++;
			var e = new gengine_Entity();
			this.soundSources[i] = new gengine_components_SoundSource();
			e.add(this.soundSources[i]);
			this.engine.addEntity(e);
		}
	}
	,playSound: function(sound) {
		var _this = this.soundSources[this.nextSoundSourceIndex++];
		var _this1 = this.sounds;
		var sound1 = __map_reserved[sound] != null ? _this1.getReserved(sound) : _this1.h[sound];
		_this.object.play1(sound1);
		this.nextSoundSourceIndex %= this.soundSources.length;
	}
	,__class__: systems_AudioSystem
});
var systems_GameSystem = function() {
	ash_core_System.call(this);
};
systems_GameSystem.__name__ = ["systems","GameSystem"];
systems_GameSystem.__super__ = ash_core_System;
systems_GameSystem.prototype = $extend(ash_core_System.prototype,{
	addToEngine: function(_engine) {
		this.engine = _engine;
		this.newGrid();
	}
	,update: function(dt) {
		var input = gengine.getInput();
		if(input.getScancodePress(41)) {
			Application.changeState("menu");
		}
	}
	,newGrid: function() {
		var offset = GridConfig.offset;
		var _g1 = 0;
		var _g = GridConfig.width;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = GridConfig.height;
			while(_g3 < _g2) {
				var j = _g3++;
				var e = Factory.getItem(Std.random(3) + 1,Std.random(4) * 90);
				e.get(components_Tile).sm.changeState("moving");
				e.get(components_Tile).position = Module.IntVector2(i,j);
				var this1 = Module.Vector2(offset.x + i * GridConfig.tileSize,offset.y + j * GridConfig.tileSize + 10 * GridConfig.tileSize);
				e.get(components_TileMovement).from = this1;
				var this2 = Module.Vector2(offset.x + i * GridConfig.tileSize,offset.y + j * GridConfig.tileSize);
				e.get(components_TileMovement).to = this2;
				e.get(components_TileMovement).duration = 0.1;
				e.get(components_TileMovement).fromAngle = e.get(components_Tile).angle - 90;
				e.get(components_TileMovement).toAngle = e.get(components_Tile).angle;
				this.engine.addEntity(e);
			}
		}
	}
	,__class__: systems_GameSystem
});
var systems_InputSystem = function(cameraEntity_) {
	ash_core_System.call(this);
	this.cameraEntity = cameraEntity_;
	var length = GridConfig.width;
	var this1 = new Array(length);
	this.grid = this1;
	var _g1 = 0;
	var _g = GridConfig.width;
	while(_g1 < _g) {
		var i = _g1++;
		var this2 = this.grid;
		var length1 = GridConfig.height;
		var this3 = new Array(length1);
		this2[i] = this3;
	}
};
systems_InputSystem.__name__ = ["systems","InputSystem"];
systems_InputSystem.__super__ = ash_core_System;
systems_InputSystem.prototype = $extend(ash_core_System.prototype,{
	addToEngine: function(_engine) {
		this.engine = _engine;
		var list = this.engine.getNodeList(nodes_TileNode);
		var _g_previous = { next : list.head};
		while(_g_previous.next != null) {
			var node = _g_previous.next;
			_g_previous = node;
			var node1 = node;
			var p = node1.tile.position;
			this.grid[p.x][p.y] = node1;
		}
		this.selectedTileNode = null;
	}
	,update: function(dt) {
		var _gthis = this;
		var input = gengine.getInput();
		var mousePosition = input.getMousePosition();
		var this1 = Module.Vector2(mousePosition.x / 1024,mousePosition.y / 768);
		var mouseScreenPosition = this1;
		var mouseWorldPosition = this.cameraEntity.get(gengine_components_Camera);
		var this2 = Module.Vector3(mouseScreenPosition.x,mouseScreenPosition.y,0);
		var mouseWorldPosition1 = mouseWorldPosition.screenToWorldPoint(this2);
		if(this.selectedTileNode != null) {
			this.selectedTileNode.sprite.object.setAlpha(1.0);
			this.selectedTileNode = null;
		}
		var offset = GridConfig.offset;
		var tileSize = GridConfig.tileSize;
		var p = Module.IntVector2((mouseWorldPosition1.x - offset.x + tileSize / 2) / tileSize | 0,(mouseWorldPosition1.y - offset.y + tileSize / 2) / tileSize | 0);
		if(p.x >= 0 && p.y >= 0 && p.x < GridConfig.width && p.y < GridConfig.height) {
			this.selectedTileNode = this.grid[p.x][p.y];
			this.selectedTileNode.sprite.object.setAlpha(0.5);
			if(input.getMouseButtonPress(1)) {
				this.selectedTileNode.tile.sm.changeState("moving");
				var tm = this.selectedTileNode.entity.get(components_TileMovement);
				tm.from = null;
				tm.to = null;
				tm.duration = 0.25;
				tm.fromAngle = this.selectedTileNode.tile.angle;
				tm.toAngle = tm.fromAngle - 90;
				Application.changeState("gameRotating");
				this.engine.getSystem(systems_AudioSystem).playSound("pop");
			} else if(input.getMouseButtonPress(4)) {
				Application.changeState("gameMatching");
				this.engine.updateComplete.addOnce(function() {
					_gthis.selectedTileNode.disappear();
				});
				this.engine.getSystem(systems_AudioSystem).playSound("deny");
			}
		}
	}
	,__class__: systems_InputSystem
});
var systems_MatchSystem = function() {
	this.entitiesToRemove = [];
	this.itMustRepopulate = false;
	this.rows = GridConfig.height + 2;
	this.cols = GridConfig.width + 2;
	ash_tools_ListIteratingSystem.call(this,nodes_TileDisappearingNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	var length = GridConfig.width;
	var this1 = new Array(length);
	this.grid = this1;
	var _g1 = 0;
	var _g = GridConfig.width;
	while(_g1 < _g) {
		var i = _g1++;
		var this2 = this.grid;
		var length1 = GridConfig.height;
		var this3 = new Array(length1);
		this2[i] = this3;
	}
	this.connections = new haxe_ds_EnumValueMap();
	var v = [false,false,false,false];
	this.connections.set(components_TileType.EMPTY,v);
	var v1 = [true,false,false,true];
	this.connections.set(components_TileType.L,v1);
	var v2 = [false,true,false,true];
	this.connections.set(components_TileType.I,v2);
	var v3 = [true,true,false,true];
	this.connections.set(components_TileType.T,v3);
};
systems_MatchSystem.__name__ = ["systems","MatchSystem"];
systems_MatchSystem.__interfaces__ = [pathfinder_IMap];
systems_MatchSystem.__super__ = ash_tools_ListIteratingSystem;
systems_MatchSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	addToEngine: function(_engine) {
		ash_tools_ListIteratingSystem.prototype.addToEngine.call(this,_engine);
		this.engine = _engine;
		var list = this.engine.getNodeList(nodes_TileNode);
		var _g_previous = { next : list.head};
		while(_g_previous.next != null) {
			var node = _g_previous.next;
			_g_previous = node;
			var node1 = node;
			var p = node1.tile.position;
			this.grid[p.x][p.y] = node1;
		}
		if(this.findMatches()) {
			this.disappearTiles();
			this.engine.getSystem(systems_AudioSystem).playSound("match");
		}
	}
	,removeFromEngine: function(_engine) {
		ash_tools_ListIteratingSystem.prototype.removeFromEngine.call(this,_engine);
	}
	,update: function(dt) {
		ash_tools_ListIteratingSystem.prototype.update.call(this,dt);
		var _g1 = 0;
		var _g = this.entitiesToRemove.length;
		while(_g1 < _g) {
			var i = _g1++;
			var e = this.entitiesToRemove[i];
			e.get(components_Tile).sm.changeState("idle");
			this.engine.removeEntity(e);
			Factory.onItemRemoved(e);
		}
		this.entitiesToRemove.splice(0,this.entitiesToRemove.length);
		if(this.count == 0 && this.nodeList.head == null && !this.itMustRepopulate) {
			Application.changeState("gameIdling");
			return;
		}
		if(this.itMustRepopulate) {
			var offset = GridConfig.offset;
			var _g11 = 0;
			var _g2 = GridConfig.width;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var holes = 0;
				var _g3 = 0;
				var _g21 = GridConfig.height;
				while(_g3 < _g21) {
					var j = _g3++;
					if(this.grid[i1][j] == null) {
						++holes;
					} else if(holes > 0) {
						var e1 = this.grid[i1][j].entity;
						e1.get(components_Tile).sm.changeState("moving");
						e1.get(components_Tile).position = Module.IntVector2(i1,j - holes);
						var this1 = Module.Vector2(offset.x + i1 * GridConfig.tileSize,offset.y + j * GridConfig.tileSize);
						e1.get(components_TileMovement).from = this1;
						var this2 = Module.Vector2(offset.x + i1 * GridConfig.tileSize,offset.y + (j - holes) * GridConfig.tileSize);
						e1.get(components_TileMovement).to = this2;
						e1.get(components_TileMovement).duration = 0.02 * holes;
						e1.get(components_TileMovement).fromAngle = e1.get(components_Tile).angle;
						e1.get(components_TileMovement).toAngle = e1.get(components_Tile).angle;
						this.grid[i1][j - holes] = this.grid[i1][j];
					}
				}
				var _g31 = 0;
				var _g22 = holes;
				while(_g31 < _g22) {
					var h = _g31++;
					var e2 = Factory.getItem(Std.random(3) + 1,Std.random(4) * 90);
					e2.get(components_Tile).sm.changeState("moving");
					var tmp = GridConfig.height - holes + h;
					e2.get(components_Tile).position = Module.IntVector2(i1,tmp);
					var this3 = Module.Vector2(offset.x + i1 * GridConfig.tileSize,offset.y + (GridConfig.height + h) * GridConfig.tileSize);
					e2.get(components_TileMovement).from = this3;
					var this4 = Module.Vector2(offset.x + i1 * GridConfig.tileSize,offset.y + (GridConfig.height - holes + h) * GridConfig.tileSize);
					e2.get(components_TileMovement).to = this4;
					e2.get(components_TileMovement).duration = 0.02 * holes;
					e2.get(components_TileMovement).fromAngle = e2.get(components_Tile).angle;
					e2.get(components_TileMovement).toAngle = e2.get(components_Tile).angle;
					var this5 = Module.Vector3(offset.x + i1 * GridConfig.tileSize,offset.y + (GridConfig.height + h) * GridConfig.tileSize,0);
					e2.set_position(this5);
					this.engine.addEntity(e2);
					var tn = this.engine.getNodeList(nodes_TileNode).tail;
					this.grid[tn.tile.position.x][tn.tile.position.y] = tn;
				}
			}
			Application.changeState("gameFalling");
			this.itMustRepopulate = false;
		}
	}
	,isWalkable: function(x,y) {
		if(x == 0 || y == 0 || x == GridConfig.width + 1 || y == GridConfig.height + 1) {
			return true;
		}
		return !this.grid[x - 1][y - 1].tile.matching;
	}
	,findMatches: function() {
		this.matches = new haxe_ds_ObjectMap();
		var _g1 = 0;
		var _g = GridConfig.width;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = 0;
			var _g2 = GridConfig.height;
			while(_g3 < _g2) {
				var y = _g3++;
				var tn = this.grid[x][y];
				var _g4 = new haxe_ds_ObjectMap();
				_g4.set(tn,true);
				this.findPath(tn,_g4,[tn],-1);
			}
		}
		var _g5 = [];
		var k = this.matches.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g5.push(k1);
		}
		this.count = _g5.length;
		return this.count > 0;
	}
	,disappearTiles: function() {
		var tileNode = this.matches.keys();
		while(tileNode.hasNext()) {
			var tileNode1 = tileNode.next();
			tileNode1.disappear();
		}
		if(this.count > 0) {
			this.pathFinder = new pathfinder_Pathfinder(this);
			var _g1 = 0;
			var _g = GridConfig.width;
			while(_g1 < _g) {
				var x = _g1++;
				var _g3 = 0;
				var _g2 = GridConfig.height;
				while(_g3 < _g2) {
					var y = _g3++;
					var tn = this.grid[x][y];
					if(!tn.tile.matching) {
						var reachable = true;
						var _g5 = 0;
						var _g4 = x;
						while(_g5 < _g4) {
							var x2 = _g5++;
							if(this.grid[x2][y].tile.matching) {
								reachable = false;
								break;
							}
						}
						if(reachable) {
							continue;
						}
						reachable = true;
						var _g51 = x;
						var _g41 = GridConfig.width;
						while(_g51 < _g41) {
							var x21 = _g51++;
							if(this.grid[x21][y].tile.matching) {
								reachable = false;
								break;
							}
						}
						if(reachable) {
							continue;
						}
						reachable = true;
						var _g52 = 0;
						var _g42 = y;
						while(_g52 < _g42) {
							var y2 = _g52++;
							if(this.grid[x][y2].tile.matching) {
								reachable = false;
								break;
							}
						}
						if(reachable) {
							continue;
						}
						reachable = true;
						var _g53 = y;
						var _g43 = GridConfig.height;
						while(_g53 < _g43) {
							var y21 = _g53++;
							if(this.grid[x][y21].tile.matching) {
								reachable = false;
								break;
							}
						}
						if(reachable) {
							continue;
						}
						var path = this.pathFinder.createPath(new pathfinder_Coordinate(x + 1,y + 1),new pathfinder_Coordinate(0,0),pathfinder_EHeuristic.PRODUCT,false,false);
						if(path == null) {
							tn.disappear();
						}
					}
				}
			}
		}
	}
	,areTilesConnected: function(first,second) {
		var p1 = first.position;
		var p2 = second.position;
		if(p1.x == p2.x) {
			if(p2.y - p1.y == 1) {
				var direction = 0;
				direction += first.angle / 90 | 0;
				while(direction < 0) direction += 4;
				while(direction >= 4) direction -= 4;
				if(this.connections.get(first.type)[direction]) {
					var direction1 = 2;
					direction1 += second.angle / 90 | 0;
					while(direction1 < 0) direction1 += 4;
					while(direction1 >= 4) direction1 -= 4;
					return this.connections.get(second.type)[direction1];
				} else {
					return false;
				}
			} else if(p1.y - p2.y == 1) {
				var direction2 = 2;
				direction2 += first.angle / 90 | 0;
				while(direction2 < 0) direction2 += 4;
				while(direction2 >= 4) direction2 -= 4;
				if(this.connections.get(first.type)[direction2]) {
					var direction3 = 0;
					direction3 += second.angle / 90 | 0;
					while(direction3 < 0) direction3 += 4;
					while(direction3 >= 4) direction3 -= 4;
					return this.connections.get(second.type)[direction3];
				} else {
					return false;
				}
			}
		} else if(p1.y == p2.y) {
			if(p2.x - p1.x == 1) {
				var direction4 = 1;
				direction4 += first.angle / 90 | 0;
				while(direction4 < 0) direction4 += 4;
				while(direction4 >= 4) direction4 -= 4;
				if(this.connections.get(first.type)[direction4]) {
					var direction5 = 3;
					direction5 += second.angle / 90 | 0;
					while(direction5 < 0) direction5 += 4;
					while(direction5 >= 4) direction5 -= 4;
					return this.connections.get(second.type)[direction5];
				} else {
					return false;
				}
			} else if(p1.x - p2.x == 1) {
				var direction6 = 3;
				direction6 += first.angle / 90 | 0;
				while(direction6 < 0) direction6 += 4;
				while(direction6 >= 4) direction6 -= 4;
				if(this.connections.get(first.type)[direction6]) {
					var direction7 = 1;
					direction7 += second.angle / 90 | 0;
					while(direction7 < 0) direction7 += 4;
					while(direction7 >= 4) direction7 -= 4;
					return this.connections.get(second.type)[direction7];
				} else {
					return false;
				}
			}
		}
		return false;
	}
	,isDirectionOpen: function(tile,direction) {
		direction += tile.angle / 90 | 0;
		while(direction < 0) direction += 4;
		while(direction >= 4) direction -= 4;
		return this.connections.get(tile.type)[direction];
	}
	,isTile: function(p) {
		if(p.x >= 0 && p.y >= 0 && p.x < GridConfig.width) {
			return p.y < GridConfig.height;
		} else {
			return false;
		}
	}
	,getConnectedTileNode: function(tileNode,direction) {
		var p = tileNode.tile.position;
		var p2;
		var tile = tileNode.tile;
		var direction1 = direction;
		direction1 += tile.angle / 90 | 0;
		while(direction1 < 0) direction1 += 4;
		while(direction1 >= 4) direction1 -= 4;
		if(this.connections.get(tile.type)[direction1]) {
			switch(direction) {
			case 0:
				p2 = Module.IntVector2(p.x,p.y + 1);
				break;
			case 1:
				p2 = Module.IntVector2(p.x + 1,p.y);
				break;
			case 2:
				p2 = Module.IntVector2(p.x,p.y - 1);
				break;
			case 3:
				p2 = Module.IntVector2(p.x - 1,p.y);
				break;
			default:
				p2 = Module.IntVector2(666,666);
			}
			if(p2.x >= 0 && p2.y >= 0 && p2.x < GridConfig.width && p2.y < GridConfig.height) {
				var tileNode2 = this.grid[p2.x][p2.y];
				var tile1 = tileNode2.tile;
				var direction2 = (direction + 2) % 4;
				direction2 += tile1.angle / 90 | 0;
				while(direction2 < 0) direction2 += 4;
				while(direction2 >= 4) direction2 -= 4;
				if(this.connections.get(tile1.type)[direction2]) {
					return tileNode2;
				}
			}
		}
		return null;
	}
	,findPath: function(tileNode,path,orderedPath,previousDirection) {
		var otherTileNode;
		var finished = false;
		var _g = 0;
		while(_g < 4) {
			var d = _g++;
			if(d != (previousDirection + 2) % 4) {
				otherTileNode = this.getConnectedTileNode(tileNode,d);
				if(otherTileNode != null) {
					if(path.h.__keys__[otherTileNode.__id__] == null) {
						var otherPath = new haxe_ds_ObjectMap();
						var otherOrderedPath = [];
						var _g1 = 0;
						while(_g1 < orderedPath.length) {
							var k = orderedPath[_g1];
							++_g1;
							var v = path.h[k.__id__];
							otherPath.set(k,v);
							otherOrderedPath.push(k);
						}
						otherPath.set(otherTileNode,true);
						otherOrderedPath.push(otherTileNode);
						this.findPath(otherTileNode,otherPath,otherOrderedPath,d);
						finished = false;
					} else if(otherTileNode == orderedPath[0]) {
						var tileNode1 = path.keys();
						while(tileNode1.hasNext()) {
							var tileNode2 = tileNode1.next();
							this.matches.set(tileNode2,true);
						}
					}
				}
			}
		}
	}
	,updateNode: function(tdn,dt) {
		tdn.tileDisappearing.time += dt;
		tdn.sprite.object.setAlpha(1.0 - tdn.tileDisappearing.time * 6);
		if(tdn.tileDisappearing.time > 0.5) {
			this.entitiesToRemove.push(tdn.entity);
		}
	}
	,onNodeAdded: function(tdn) {
		tdn.tileDisappearing.time = 0;
	}
	,onNodeRemoved: function(tdn) {
		var p = tdn.tile.position;
		this.grid[p.x][p.y] = null;
		if(this.engine.getNodeList(nodes_TileDisappearingNode).head == null) {
			this.itMustRepopulate = true;
		}
	}
	,countPossibleMatches: function() {
		var result = 0;
		var _g1 = 0;
		var _g = GridConfig.width;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = GridConfig.height;
			while(_g3 < _g2) {
				var j = _g3++;
				var tn = this.grid[i][j];
				var _g4 = 0;
				while(_g4 < 3) {
					var r = _g4++;
					tn.tile.angle += 90;
					if(this.findMatches()) {
						++result;
					}
				}
				tn.tile.angle -= 270;
			}
		}
		return result;
	}
	,__class__: systems_MatchSystem
});
var systems_MenuSystem = $hx_exports["Menu"] = function() {
	ash_core_System.call(this);
};
systems_MenuSystem.__name__ = ["systems","MenuSystem"];
systems_MenuSystem.__super__ = ash_core_System;
systems_MenuSystem.prototype = $extend(ash_core_System.prototype,{
	init: function() {
		$(".startButton").click($bind(this,this.onStartClick));
		$(".quitButton").click($bind(this,this.onQuitClick));
	}
	,addToEngine: function(_engine) {
		this.engine = _engine;
	}
	,update: function(dt) {
		var input = gengine.getInput();
		if(input.getScancodePress(41)) {
			console.log("Labyr exit.");
			gengine.exit();
		}
	}
	,onStartClick: function(event) {
		Application.changeState("gameFalling");
		Application.pages.showPage(".hud");
	}
	,onQuitClick: function(event) {
		console.log("Labyr exit.");
		gengine.exit();
	}
	,__class__: systems_MenuSystem
});
var systems_TileMovementSystem = function() {
	ash_tools_ListIteratingSystem.call(this,nodes_TileMovementNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
};
systems_TileMovementSystem.__name__ = ["systems","TileMovementSystem"];
systems_TileMovementSystem.easeIn = function(f) {
	return 1.0 - Math.cos(f * Math.PI * 0.5);
};
systems_TileMovementSystem.__super__ = ash_tools_ListIteratingSystem;
systems_TileMovementSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
		var tm = node.tileMovement;
		var from = tm.from;
		var to = tm.to;
		var fromAngle = tm.fromAngle;
		var toAngle = tm.toAngle;
		tm.time += dt;
		var factor = tm.time / tm.duration;
		if(from != null) {
			var node1 = node.entity;
			var this1 = Module.Vector3(from.x + (to.x - from.x) * systems_TileMovementSystem.easeIn(factor),from.y + (to.y - from.y) * systems_TileMovementSystem.easeIn(factor),0);
			node1.set_position(this1);
		}
		if(toAngle != null) {
			var _this = node.entity;
			var angle = fromAngle + (toAngle - fromAngle) * systems_TileMovementSystem.easeIn(factor);
			_this.node.setRotation2D(angle);
		}
		if(factor > 1) {
			if(from != null) {
				var node2 = node.entity;
				var this2 = Module.Vector3(to.x,to.y,0);
				node2.set_position(this2);
			}
			if(toAngle != null) {
				while(toAngle < 0) toAngle += 360;
				while(toAngle >= 360) toAngle -= 360;
				node.entity.node.setRotation2D(toAngle);
				node.tile.angle = toAngle;
			}
			node.tile.sm.changeState("idle");
		}
	}
	,onNodeAdded: function(node) {
		node.tileMovement.time = 0;
	}
	,onNodeRemoved: function(node) {
		if(this.nodeList.head == null) {
			Application.changeState("gameMatching");
		}
	}
	,__class__: systems_TileMovementSystem
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
Factory.pool = [];
GridConfig.width = 8;
GridConfig.height = 8;
GridConfig.tileSize = 640 / GridConfig.width | 0;
GridConfig.offset = (function($this) {
	var $r;
	var this1 = Module.Vector2(-GridConfig.width / 2 * GridConfig.tileSize + GridConfig.tileSize / 2,-GridConfig.height / 2 * GridConfig.tileSize + GridConfig.tileSize / 2);
	$r = this1;
	return $r;
}(this));
ash_core_Entity.nameCount = 0;
gengine_math__$Color_Color_$Impl_$.BLACK = (function($this) {
	var $r;
	var this1 = Module.Color(0,0,0,1);
	$r = this1;
	return $r;
}(this));
gengine_math__$Color_Color_$Impl_$.WHITE = (function($this) {
	var $r;
	var this1 = Module.Color(1,1,1,1);
	$r = this1;
	return $r;
}(this));
gengine_math__$Quaternion_Quaternion_$Impl_$.IDENTITY = (function($this) {
	var $r;
	var this1 = Module.Quaternion(1.0,0.0,0.0,0.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector2_Vector2_$Impl_$.ZERO = (function($this) {
	var $r;
	var this1 = Module.Vector2(0,0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector2_Vector2_$Impl_$.LEFT = (function($this) {
	var $r;
	var this1 = Module.Vector2(-1.0,0.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector2_Vector2_$Impl_$.RIGHT = (function($this) {
	var $r;
	var this1 = Module.Vector2(1.0,0.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector2_Vector2_$Impl_$.UP = (function($this) {
	var $r;
	var this1 = Module.Vector2(0.0,1.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector2_Vector2_$Impl_$.DOWN = (function($this) {
	var $r;
	var this1 = Module.Vector2(0.0,-1.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector2_Vector2_$Impl_$.ONE = (function($this) {
	var $r;
	var this1 = Module.Vector2(1.0,1.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector3_Vector3_$Impl_$.ZERO = (function($this) {
	var $r;
	var this1 = Module.Vector3(0,0,0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector3_Vector3_$Impl_$.LEFT = (function($this) {
	var $r;
	var this1 = Module.Vector3(-1.0,0.0,0.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector3_Vector3_$Impl_$.RIGHT = (function($this) {
	var $r;
	var this1 = Module.Vector3(1.0,0.0,0.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector3_Vector3_$Impl_$.UP = (function($this) {
	var $r;
	var this1 = Module.Vector3(0.0,1.0,0.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector3_Vector3_$Impl_$.DOWN = (function($this) {
	var $r;
	var this1 = Module.Vector3(0.0,-1.0,0.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector3_Vector3_$Impl_$.FORWARD = (function($this) {
	var $r;
	var this1 = Module.Vector3(0.0,0.0,1.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector3_Vector3_$Impl_$.BACK = (function($this) {
	var $r;
	var this1 = Module.Vector3(0.0,0.0,-1.0);
	$r = this1;
	return $r;
}(this));
gengine_math__$Vector3_Vector3_$Impl_$.ONE = (function($this) {
	var $r;
	var this1 = Module.Vector3(1.0,1.0,1.0);
	$r = this1;
	return $r;
}(this));
gengine_systems_Physics2DSystem.urhoBodyToEntity = new haxe_ds_IntMap();
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
js_UIPages.instances = new haxe_ds_ObjectMap();
pathfinder_Pathfinder._COST_ADJACENT = 10;
pathfinder_Pathfinder._COST_DIAGIONAL = 14;
gengine_Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
